// <auto-generated />
using System;
using AccountingSystem.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AccountingSystem.Data.Migrations
{
    [DbContext(typeof(AccountingDbContext))]
    [Migration("20250921170954_UpdateProductBarcodes")]
    partial class UpdateProductBarcodes
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AccountingSystem.Models.CashBox", b =>
                {
                    b.Property<int>("CashBoxId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CashBoxId"));

                    b.Property<string>("CashBoxName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("CurrentBalance")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("CashBoxId");

                    b.ToTable("CashBoxes", null, t =>
                        {
                            t.HasCheckConstraint("CK_CashBox_Balance", "[CurrentBalance] >= 0");
                        });

                    b.HasData(
                        new
                        {
                            CashBoxId = 1,
                            CashBoxName = "الخزنة الرئيسية",
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            CurrentBalance = 10000.00m,
                            Description = "الخزنة الرئيسية للشركة - جنيه مصري",
                            IsActive = true
                        },
                        new
                        {
                            CashBoxId = 2,
                            CashBoxName = "خزنة الفرع الثاني",
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            CurrentBalance = 5000.00m,
                            Description = "خزنة فرعية للعمليات اليومية",
                            IsActive = true
                        });
                });

            modelBuilder.Entity("AccountingSystem.Models.CashTransaction", b =>
                {
                    b.Property<int>("CashTransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CashTransactionId"));

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("CashBoxId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("ReferenceId")
                        .HasColumnType("int");

                    b.Property<string>("ReferenceType")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TransactionNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("TransactionType")
                        .HasColumnType("int");

                    b.HasKey("CashTransactionId");

                    b.HasIndex("CashBoxId");

                    b.HasIndex("TransactionNumber")
                        .IsUnique()
                        .HasDatabaseName("IX_CashTransaction_Number");

                    b.ToTable("CashTransactions", (string)null);
                });

            modelBuilder.Entity("AccountingSystem.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("CategoryId");

                    b.HasIndex("CategoryName")
                        .IsUnique()
                        .HasDatabaseName("IX_Category_Name");

                    b.ToTable("Categories", (string)null);

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            CategoryName = "عام",
                            Description = "فئة عامة لجميع المنتجات",
                            IsActive = true
                        },
                        new
                        {
                            CategoryId = 2,
                            CategoryName = "مواد غذائية",
                            Description = "المواد الغذائية والمشروبات والبقالة",
                            IsActive = true
                        },
                        new
                        {
                            CategoryId = 3,
                            CategoryName = "مواد تنظيف",
                            Description = "مواد التنظيف والمطهرات",
                            IsActive = true
                        },
                        new
                        {
                            CategoryId = 4,
                            CategoryName = "أدوات منزلية",
                            Description = "الأدوات والأجهزة المنزلية",
                            IsActive = true
                        },
                        new
                        {
                            CategoryId = 5,
                            CategoryName = "أجهزة إلكترونية",
                            Description = "الأجهزة الإلكترونية والكهربائية",
                            IsActive = true
                        },
                        new
                        {
                            CategoryId = 6,
                            CategoryName = "ملابس",
                            Description = "الملابس والأزياء",
                            IsActive = true
                        },
                        new
                        {
                            CategoryId = 7,
                            CategoryName = "أدوية",
                            Description = "الأدوية والمستحضرات الطبية",
                            IsActive = true
                        },
                        new
                        {
                            CategoryId = 8,
                            CategoryName = "مستحضرات تجميل",
                            Description = "مستحضرات التجميل والعناية الشخصية",
                            IsActive = true
                        });
                });

            modelBuilder.Entity("AccountingSystem.Models.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerId"));

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("Balance")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("CustomerId");

                    b.HasIndex("CustomerName")
                        .HasDatabaseName("IX_Customer_Name");

                    b.ToTable("Customers", null, t =>
                        {
                            t.HasCheckConstraint("CK_Customer_Name", "LEN([CustomerName]) > 0");
                        });

                    b.HasData(
                        new
                        {
                            CustomerId = 1,
                            Address = "القاهرة - مدينة نصر - شارع مصطفى النحاس",
                            Balance = 1500.00m,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            CustomerName = "أحمد محمد عبد الله",
                            Email = "ahmed.mohamed@gmail.com",
                            IsActive = true,
                            Phone = "01012345678"
                        },
                        new
                        {
                            CustomerId = 2,
                            Address = "الإسكندرية - سموحة - شارع الحجاز",
                            Balance = 0.00m,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            CustomerName = "فاطمة علي حسن",
                            Email = "fatma.ali@yahoo.com",
                            IsActive = true,
                            Phone = "01123456789"
                        },
                        new
                        {
                            CustomerId = 3,
                            Address = "الجيزة - الدقي - شارع النيل",
                            Balance = -850.00m,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            CustomerName = "محمد حسن إبراهيم",
                            Email = "mohamed.hassan@hotmail.com",
                            IsActive = true,
                            Phone = "01234567890"
                        },
                        new
                        {
                            CustomerId = 4,
                            Address = "القاهرة - المعادي - كورنيش النيل",
                            Balance = 2200.00m,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            CustomerName = "مريم أحمد سالم",
                            Email = "maryam.ahmed@gmail.com",
                            IsActive = true,
                            Phone = "01098765432"
                        },
                        new
                        {
                            CustomerId = 5,
                            Address = "الإسكندرية - العجمي - طريق الساحل الشمالي",
                            Balance = 0.00m,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            CustomerName = "عمر محمود طه",
                            Email = "omar.mahmoud@live.com",
                            IsActive = true,
                            Phone = "01156789012"
                        },
                        new
                        {
                            CustomerId = 6,
                            Address = "الجيزة - الهرم - شارع الهرم الرئيسي",
                            Balance = 650.00m,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            CustomerName = "نور الدين عبد الرحمن",
                            Email = "nour.eldin@outlook.com",
                            IsActive = true,
                            Phone = "01267890123"
                        });
                });

            modelBuilder.Entity("AccountingSystem.Models.CustomerPriceHistory", b =>
                {
                    b.Property<int>("PriceHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PriceHistoryId"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("LastInvoiceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastSaleDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("LastSalePrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.HasKey("PriceHistoryId");

                    b.HasIndex("ProductId");

                    b.HasIndex("UnitId");

                    b.HasIndex("CustomerId", "ProductId", "UnitId");

                    b.ToTable("CustomerPriceHistories", (string)null);
                });

            modelBuilder.Entity("AccountingSystem.Models.CustomerTransaction", b =>
                {
                    b.Property<int>("CustomerTransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerTransactionId"));

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("ReferenceId")
                        .HasColumnType("int");

                    b.Property<string>("ReferenceType")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TransactionNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("TransactionType")
                        .HasColumnType("int");

                    b.HasKey("CustomerTransactionId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("TransactionNumber")
                        .IsUnique()
                        .HasDatabaseName("IX_CustomerTransaction_Number");

                    b.ToTable("CustomerTransactions", (string)null);
                });

            modelBuilder.Entity("AccountingSystem.Models.NumberSequence", b =>
                {
                    b.Property<int>("SequenceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SequenceId"));

                    b.Property<int>("CurrentNumber")
                        .HasColumnType("int");

                    b.Property<int>("NumberLength")
                        .HasColumnType("int");

                    b.Property<string>("Prefix")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("SequenceType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Suffix")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("SequenceId");

                    b.HasIndex("SequenceType")
                        .IsUnique()
                        .HasDatabaseName("IX_NumberSequence_Type");

                    b.ToTable("NumberSequences", (string)null);

                    b.HasData(
                        new
                        {
                            SequenceId = 1,
                            CurrentNumber = 0,
                            NumberLength = 6,
                            Prefix = "S",
                            SequenceType = "SalesInvoice",
                            UpdatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            SequenceId = 2,
                            CurrentNumber = 0,
                            NumberLength = 6,
                            Prefix = "P",
                            SequenceType = "PurchaseInvoice",
                            UpdatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            SequenceId = 3,
                            CurrentNumber = 0,
                            NumberLength = 6,
                            Prefix = "C",
                            SequenceType = "Customer",
                            UpdatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            SequenceId = 4,
                            CurrentNumber = 0,
                            NumberLength = 6,
                            Prefix = "SP",
                            SequenceType = "Supplier",
                            UpdatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            SequenceId = 5,
                            CurrentNumber = 0,
                            NumberLength = 6,
                            Prefix = "PR",
                            SequenceType = "Product",
                            UpdatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            SequenceId = 6,
                            CurrentNumber = 0,
                            NumberLength = 6,
                            Prefix = "CT",
                            SequenceType = "CashTransaction",
                            UpdatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            SequenceId = 7,
                            CurrentNumber = 0,
                            NumberLength = 6,
                            Prefix = "CuT",
                            SequenceType = "CustomerTransaction",
                            UpdatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            SequenceId = 8,
                            CurrentNumber = 0,
                            NumberLength = 6,
                            Prefix = "SuT",
                            SequenceType = "SupplierTransaction",
                            UpdatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            SequenceId = 9,
                            CurrentNumber = 0,
                            NumberLength = 6,
                            Prefix = "SM",
                            SequenceType = "StockMovement",
                            UpdatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Local)
                        });
                });

            modelBuilder.Entity("AccountingSystem.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<string>("Barcode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("CurrentStock")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("MainUnitId")
                        .HasColumnType("int");

                    b.Property<decimal>("MinimumStock")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("ProductCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("PurchasePrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<decimal>("SalePrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("MainUnitId");

                    b.HasIndex("ProductCode")
                        .IsUnique()
                        .HasDatabaseName("IX_Product_Code");

                    b.ToTable("Products", null, t =>
                        {
                            t.HasCheckConstraint("CK_Product_Prices", "[PurchasePrice] >= 0 AND [SalePrice] >= 0");

                            t.HasCheckConstraint("CK_Product_Stock", "[CurrentStock] >= 0 AND [MinimumStock] >= 0");
                        });

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            CategoryId = 2,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            CurrentStock = 500m,
                            Description = "أرز أبيض من النوع الممتاز - منتج محلي",
                            IsActive = true,
                            MainUnitId = 2,
                            MinimumStock = 50m,
                            ProductCode = "PR000001",
                            ProductName = "أرز أبيض مصري",
                            PurchasePrice = 28.50m,
                            SalePrice = 35.00m
                        },
                        new
                        {
                            ProductId = 2,
                            CategoryId = 2,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            CurrentStock = 200m,
                            Description = "زيت طعام سولنزا - 1 لتر",
                            IsActive = true,
                            MainUnitId = 3,
                            MinimumStock = 20m,
                            ProductCode = "PR000002",
                            ProductName = "زيت طعام سولنزا",
                            PurchasePrice = 48.00m,
                            SalePrice = 58.00m
                        },
                        new
                        {
                            ProductId = 3,
                            CategoryId = 2,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            CurrentStock = 300m,
                            Description = "سكر أبيض ناعم - منتج محلي",
                            IsActive = true,
                            MainUnitId = 2,
                            MinimumStock = 30m,
                            ProductCode = "PR000003",
                            ProductName = "سكر أبيض مصري",
                            PurchasePrice = 22.00m,
                            SalePrice = 28.00m
                        },
                        new
                        {
                            ProductId = 4,
                            CategoryId = 2,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            CurrentStock = 150m,
                            Description = "شاي أحمد إيرل جراي - 100 كيس",
                            IsActive = true,
                            MainUnitId = 5,
                            MinimumStock = 15m,
                            ProductCode = "PR000004",
                            ProductName = "شاي أحمد",
                            PurchasePrice = 42.00m,
                            SalePrice = 52.00m
                        },
                        new
                        {
                            ProductId = 5,
                            CategoryId = 3,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            CurrentStock = 100m,
                            Description = "مسحوق غسيل أريال - 3 كيلو",
                            IsActive = true,
                            MainUnitId = 5,
                            MinimumStock = 10m,
                            ProductCode = "PR000005",
                            ProductName = "صابون أريال",
                            PurchasePrice = 75.00m,
                            SalePrice = 90.00m
                        },
                        new
                        {
                            ProductId = 6,
                            CategoryId = 3,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            CurrentStock = 80m,
                            Description = "سائل تنظيف أطباق فيري - 1 لتر",
                            IsActive = true,
                            MainUnitId = 5,
                            MinimumStock = 8m,
                            ProductCode = "PR000006",
                            ProductName = "منظف فيري",
                            PurchasePrice = 32.00m,
                            SalePrice = 42.00m
                        },
                        new
                        {
                            ProductId = 7,
                            CategoryId = 4,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            CurrentStock = 25m,
                            Description = "مقلاة تيفال غير لاصقة - 26 سم",
                            IsActive = true,
                            MainUnitId = 1,
                            MinimumStock = 5m,
                            ProductCode = "PR000007",
                            ProductName = "مقلاة تيفال",
                            PurchasePrice = 180.00m,
                            SalePrice = 230.00m
                        },
                        new
                        {
                            ProductId = 8,
                            CategoryId = 4,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            CurrentStock = 15m,
                            Description = "خلاط موليكس 3 سرعات - 400 واط",
                            IsActive = true,
                            MainUnitId = 1,
                            MinimumStock = 3m,
                            ProductCode = "PR000008",
                            ProductName = "خلاط موليكس",
                            PurchasePrice = 420.00m,
                            SalePrice = 520.00m
                        },
                        new
                        {
                            ProductId = 9,
                            CategoryId = 5,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            CurrentStock = 10m,
                            Description = "تليفزيون سامسونج LED 43 بوصة",
                            IsActive = true,
                            MainUnitId = 1,
                            MinimumStock = 2m,
                            ProductCode = "PR000009",
                            ProductName = "تليفزيون سامسونج",
                            PurchasePrice = 8500.00m,
                            SalePrice = 10200.00m
                        },
                        new
                        {
                            ProductId = 10,
                            CategoryId = 5,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            CurrentStock = 20m,
                            Description = "سامسونج جالاكسي A54 - 128 جيجا",
                            IsActive = true,
                            MainUnitId = 1,
                            MinimumStock = 5m,
                            ProductCode = "PR000010",
                            ProductName = "موبايل سامسونج",
                            PurchasePrice = 12000.00m,
                            SalePrice = 14500.00m
                        });
                });

            modelBuilder.Entity("AccountingSystem.Models.ProductUnit", b =>
                {
                    b.Property<int>("ProductUnitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductUnitId"));

                    b.Property<decimal>("ConversionFactor")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.HasKey("ProductUnitId");

                    b.HasIndex("UnitId");

                    b.HasIndex(new[] { "ProductId", "UnitId" }, "UX_ProductUnit_Product_Unit")
                        .IsUnique();

                    b.ToTable("ProductUnits", (string)null);

                    b.HasData(
                        new
                        {
                            ProductUnitId = 1,
                            ConversionFactor = 25.0m,
                            IsActive = true,
                            ProductId = 1,
                            UnitId = 5
                        },
                        new
                        {
                            ProductUnitId = 2,
                            ConversionFactor = 1000.0m,
                            IsActive = true,
                            ProductId = 1,
                            UnitId = 6
                        },
                        new
                        {
                            ProductUnitId = 3,
                            ConversionFactor = 50.0m,
                            IsActive = true,
                            ProductId = 3,
                            UnitId = 5
                        },
                        new
                        {
                            ProductUnitId = 4,
                            ConversionFactor = 0.001m,
                            IsActive = true,
                            ProductId = 3,
                            UnitId = 7
                        },
                        new
                        {
                            ProductUnitId = 5,
                            ConversionFactor = 12.0m,
                            IsActive = true,
                            ProductId = 5,
                            UnitId = 6
                        },
                        new
                        {
                            ProductUnitId = 6,
                            ConversionFactor = 3.0m,
                            IsActive = true,
                            ProductId = 5,
                            UnitId = 2
                        });
                });

            modelBuilder.Entity("AccountingSystem.Models.PurchaseInvoice", b =>
                {
                    b.Property<int>("PurchaseInvoiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PurchaseInvoiceId"));

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("DiscountAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InvoiceNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<bool>("IsPosted")
                        .HasColumnType("bit");

                    b.Property<decimal>("NetTotal")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal>("PaidAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("RemainingAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("SubTotal")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.Property<decimal>("TaxAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("PurchaseInvoiceId");

                    b.HasIndex("InvoiceNumber")
                        .IsUnique()
                        .HasDatabaseName("IX_PurchaseInvoice_Number");

                    b.HasIndex("SupplierId");

                    b.ToTable("PurchaseInvoices", (string)null);
                });

            modelBuilder.Entity("AccountingSystem.Models.PurchaseInvoiceDetail", b =>
                {
                    b.Property<int>("PurchaseInvoiceDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PurchaseInvoiceDetailId"));

                    b.Property<decimal>("DiscountAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("NetAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("PurchaseInvoiceId")
                        .HasColumnType("int");

                    b.Property<decimal>("Quantity")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<decimal>("TotalPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("PurchaseInvoiceDetailId");

                    b.HasIndex("ProductId");

                    b.HasIndex("PurchaseInvoiceId");

                    b.HasIndex("UnitId");

                    b.ToTable("PurchaseInvoiceDetails", (string)null);
                });

            modelBuilder.Entity("AccountingSystem.Models.SalesInvoice", b =>
                {
                    b.Property<int>("SalesInvoiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SalesInvoiceId"));

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<decimal>("DiscountAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InvoiceNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<bool>("IsPosted")
                        .HasColumnType("bit");

                    b.Property<decimal>("NetTotal")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal>("PaidAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("RemainingAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("SubTotal")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TaxAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("SalesInvoiceId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("InvoiceNumber")
                        .IsUnique()
                        .HasDatabaseName("IX_SalesInvoice_Number");

                    b.ToTable("SalesInvoices", (string)null);
                });

            modelBuilder.Entity("AccountingSystem.Models.SalesInvoiceDetail", b =>
                {
                    b.Property<int>("SalesInvoiceDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SalesInvoiceDetailId"));

                    b.Property<decimal>("DiscountAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("NetAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<decimal>("Quantity")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("SalesInvoiceId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("SalesInvoiceDetailId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SalesInvoiceId");

                    b.HasIndex("UnitId");

                    b.ToTable("SalesInvoiceDetails", (string)null);
                });

            modelBuilder.Entity("AccountingSystem.Models.StockMovement", b =>
                {
                    b.Property<int>("StockMovementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StockMovementId"));

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("MovementDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MovementType")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<decimal>("Quantity")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("QuantityInMainUnit")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,4)");

                    b.Property<int?>("ReferenceId")
                        .HasColumnType("int");

                    b.Property<string>("ReferenceType")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.HasKey("StockMovementId");

                    b.HasIndex("ProductId");

                    b.HasIndex("UnitId");

                    b.ToTable("StockMovements", (string)null);
                });

            modelBuilder.Entity("AccountingSystem.Models.Supplier", b =>
                {
                    b.Property<int>("SupplierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SupplierId"));

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("Balance")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("SupplierName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("SupplierId");

                    b.HasIndex("SupplierName")
                        .HasDatabaseName("IX_Supplier_Name");

                    b.ToTable("Suppliers", null, t =>
                        {
                            t.HasCheckConstraint("CK_Supplier_Name", "LEN([SupplierName]) > 0");
                        });

                    b.HasData(
                        new
                        {
                            SupplierId = 1,
                            Address = "القاهرة - العبور - المنطقة الصناعية الأولى",
                            Balance = 15000.00m,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Email = "info@ahram-foods.com",
                            IsActive = true,
                            Phone = "0223456789",
                            SupplierName = "شركة الأهرام للمواد الغذائية"
                        },
                        new
                        {
                            SupplierId = 2,
                            Address = "الإسكندرية - الورديان - المنطقة الحرة",
                            Balance = 8500.00m,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Email = "orders@nile-trading.com",
                            IsActive = true,
                            Phone = "0334567890",
                            SupplierName = "مؤسسة النيل للتجارة والاستيراد"
                        },
                        new
                        {
                            SupplierId = 3,
                            Address = "طنطا - المنطقة الصناعية - شارع المصنع",
                            Balance = 22000.00m,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Email = "sales@delta-appliances.com",
                            IsActive = true,
                            Phone = "0405678901",
                            SupplierName = "شركة الدلتا للأجهزة المنزلية"
                        },
                        new
                        {
                            SupplierId = 4,
                            Address = "القاهرة - مدينة العبور - المنطقة الصناعية الثالثة",
                            Balance = 45000.00m,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Email = "contact@mideast-electronics.com",
                            IsActive = true,
                            Phone = "0226789012",
                            SupplierName = "مجموعة الشرق الأوسط للإلكترونيات"
                        },
                        new
                        {
                            SupplierId = 5,
                            Address = "الإسكندرية - برج العرب الجديدة - القطعة الصناعية 15",
                            Balance = 6800.00m,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Email = "orders@egyptian-cleaning.com",
                            IsActive = true,
                            Phone = "0337890123",
                            SupplierName = "شركة المصرية لمواد التنظيف"
                        });
                });

            modelBuilder.Entity("AccountingSystem.Models.SupplierTransaction", b =>
                {
                    b.Property<int>("SupplierTransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SupplierTransactionId"));

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("ReferenceId")
                        .HasColumnType("int");

                    b.Property<string>("ReferenceType")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TransactionNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("TransactionType")
                        .HasColumnType("int");

                    b.HasKey("SupplierTransactionId");

                    b.HasIndex("SupplierId");

                    b.HasIndex("TransactionNumber")
                        .IsUnique()
                        .HasDatabaseName("IX_SupplierTransaction_Number");

                    b.ToTable("SupplierTransactions", (string)null);
                });

            modelBuilder.Entity("AccountingSystem.Models.SystemSettings", b =>
                {
                    b.Property<int>("SettingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SettingId"));

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("SettingKey")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("SettingValue")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("SettingId");

                    b.HasIndex("SettingKey")
                        .IsUnique()
                        .HasDatabaseName("IX_SystemSettings_Key");

                    b.ToTable("SystemSettings", (string)null);

                    b.HasData(
                        new
                        {
                            SettingId = 1,
                            Description = "اسم الشركة الرسمي",
                            SettingKey = "CompanyName",
                            SettingValue = "النظام المحاسبي الشامل",
                            UpdatedDate = new DateTime(2025, 9, 21, 20, 9, 53, 522, DateTimeKind.Local).AddTicks(8198)
                        },
                        new
                        {
                            SettingId = 2,
                            Description = "عنوان الشركة",
                            SettingKey = "CompanyAddress",
                            SettingValue = "جمهورية مصر العربية",
                            UpdatedDate = new DateTime(2025, 9, 21, 20, 9, 53, 522, DateTimeKind.Local).AddTicks(8252)
                        },
                        new
                        {
                            SettingId = 3,
                            Description = "هاتف الشركة",
                            SettingKey = "CompanyPhone",
                            SettingValue = "+20-000-000-0000",
                            UpdatedDate = new DateTime(2025, 9, 21, 20, 9, 53, 522, DateTimeKind.Local).AddTicks(8254)
                        },
                        new
                        {
                            SettingId = 4,
                            Description = "بريد الشركة الإلكتروني",
                            SettingKey = "CompanyEmail",
                            SettingValue = "info@company.com",
                            UpdatedDate = new DateTime(2025, 9, 21, 20, 9, 53, 522, DateTimeKind.Local).AddTicks(8256)
                        },
                        new
                        {
                            SettingId = 5,
                            Description = "نسبة ضريبة القيمة المضافة %",
                            SettingKey = "TaxRate",
                            SettingValue = "14",
                            UpdatedDate = new DateTime(2025, 9, 21, 20, 9, 53, 522, DateTimeKind.Local).AddTicks(8258)
                        },
                        new
                        {
                            SettingId = 6,
                            Description = "الرقم الضريبي للشركة",
                            SettingKey = "TaxNumber",
                            SettingValue = "123-456-789",
                            UpdatedDate = new DateTime(2025, 9, 21, 20, 9, 53, 522, DateTimeKind.Local).AddTicks(8259)
                        },
                        new
                        {
                            SettingId = 7,
                            Description = "العملة الأساسية - الجنيه المصري",
                            SettingKey = "Currency",
                            SettingValue = "ج.م",
                            UpdatedDate = new DateTime(2025, 9, 21, 20, 9, 53, 522, DateTimeKind.Local).AddTicks(8261)
                        },
                        new
                        {
                            SettingId = 8,
                            Description = "اسم العملة الكامل",
                            SettingKey = "CurrencyName",
                            SettingValue = "الجنيه المصري",
                            UpdatedDate = new DateTime(2025, 9, 21, 20, 9, 53, 522, DateTimeKind.Local).AddTicks(8263)
                        },
                        new
                        {
                            SettingId = 9,
                            Description = "رمز العملة المختصر",
                            SettingKey = "CurrencySymbol",
                            SettingValue = "ج.م",
                            UpdatedDate = new DateTime(2025, 9, 21, 20, 9, 53, 522, DateTimeKind.Local).AddTicks(8264)
                        },
                        new
                        {
                            SettingId = 10,
                            Description = "تنسيق عرض العملة",
                            SettingKey = "CurrencyFormat",
                            SettingValue = "#,##0.00 'ج.م'",
                            UpdatedDate = new DateTime(2025, 9, 21, 20, 9, 53, 522, DateTimeKind.Local).AddTicks(8266)
                        },
                        new
                        {
                            SettingId = 11,
                            Description = "عدد الخانات العشرية للعملة",
                            SettingKey = "DecimalPlaces",
                            SettingValue = "2",
                            UpdatedDate = new DateTime(2025, 9, 21, 20, 9, 53, 522, DateTimeKind.Local).AddTicks(8267)
                        },
                        new
                        {
                            SettingId = 12,
                            Description = "تنسيق التاريخ",
                            SettingKey = "DateFormat",
                            SettingValue = "dd/MM/yyyy",
                            UpdatedDate = new DateTime(2025, 9, 21, 20, 9, 53, 522, DateTimeKind.Local).AddTicks(8272)
                        },
                        new
                        {
                            SettingId = 13,
                            Description = "لغة النظام",
                            SettingKey = "Language",
                            SettingValue = "ar-EG",
                            UpdatedDate = new DateTime(2025, 9, 21, 20, 9, 53, 522, DateTimeKind.Local).AddTicks(8273)
                        },
                        new
                        {
                            SettingId = 14,
                            Description = "مسار النسخ الاحتياطية",
                            SettingKey = "BackupPath",
                            SettingValue = "C:\\Backups\\Accounting",
                            UpdatedDate = new DateTime(2025, 9, 21, 20, 9, 53, 522, DateTimeKind.Local).AddTicks(8275)
                        },
                        new
                        {
                            SettingId = 15,
                            Description = "تفعيل النسخ الاحتياطية التلقائية",
                            SettingKey = "AutoBackup",
                            SettingValue = "true",
                            UpdatedDate = new DateTime(2025, 9, 21, 20, 9, 53, 522, DateTimeKind.Local).AddTicks(8277)
                        });
                });

            modelBuilder.Entity("AccountingSystem.Models.Unit", b =>
                {
                    b.Property<int>("UnitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UnitId"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("UnitName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UnitSymbol")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("UnitId");

                    b.HasIndex("UnitName")
                        .IsUnique()
                        .HasDatabaseName("IX_Unit_Name");

                    b.ToTable("Units", (string)null);

                    b.HasData(
                        new
                        {
                            UnitId = 1,
                            IsActive = true,
                            UnitName = "قطعة",
                            UnitSymbol = "قطعة"
                        },
                        new
                        {
                            UnitId = 2,
                            IsActive = true,
                            UnitName = "كيلو جرام",
                            UnitSymbol = "كجم"
                        },
                        new
                        {
                            UnitId = 3,
                            IsActive = true,
                            UnitName = "لتر",
                            UnitSymbol = "لتر"
                        },
                        new
                        {
                            UnitId = 4,
                            IsActive = true,
                            UnitName = "متر",
                            UnitSymbol = "م"
                        },
                        new
                        {
                            UnitId = 5,
                            IsActive = true,
                            UnitName = "علبة",
                            UnitSymbol = "علبة"
                        },
                        new
                        {
                            UnitId = 6,
                            IsActive = true,
                            UnitName = "كرتونة",
                            UnitSymbol = "كرتونة"
                        },
                        new
                        {
                            UnitId = 7,
                            IsActive = true,
                            UnitName = "جرام",
                            UnitSymbol = "جم"
                        },
                        new
                        {
                            UnitId = 8,
                            IsActive = true,
                            UnitName = "طن",
                            UnitSymbol = "طن"
                        });
                });

            modelBuilder.Entity("AccountingSystem.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("FailedAccessCount")
                        .HasColumnType("int");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLoginDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LockoutEnd")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Role")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("UserId");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("IX_User_Email")
                        .HasFilter("[Email] IS NOT NULL");

                    b.HasIndex("UserName")
                        .IsUnique()
                        .HasDatabaseName("IX_User_UserName");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Email = "admin@system.com",
                            FailedAccessCount = 0,
                            FullName = "مدير النظام",
                            IsActive = true,
                            PasswordHash = "PBKDF2:120000:c6c26yJQmQpsRPYGDmB5nQ==:V5IsjDNiy2POmseczguUobxGvG3j0EJkMTU1W0zH5PM=",
                            Phone = "01000000000",
                            Role = "admin",
                            UserName = "admin"
                        },
                        new
                        {
                            UserId = 2,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Email = "accountant@system.com",
                            FailedAccessCount = 0,
                            FullName = "المحاسب الرئيسي",
                            IsActive = true,
                            PasswordHash = "PBKDF2:120000:c6c26yJQmQpsRPYGDmB5nQ==:V5IsjDNiy2POmseczguUobxGvG3j0EJkMTU1W0zH5PM=",
                            Phone = "01100000000",
                            Role = "accountant",
                            UserName = "accountant"
                        });
                });

            modelBuilder.Entity("AccountingSystem.Models.CashTransaction", b =>
                {
                    b.HasOne("AccountingSystem.Models.CashBox", "CashBox")
                        .WithMany("CashTransactions")
                        .HasForeignKey("CashBoxId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CashBox");
                });

            modelBuilder.Entity("AccountingSystem.Models.CustomerPriceHistory", b =>
                {
                    b.HasOne("AccountingSystem.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AccountingSystem.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AccountingSystem.Models.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Product");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("AccountingSystem.Models.CustomerTransaction", b =>
                {
                    b.HasOne("AccountingSystem.Models.Customer", "Customer")
                        .WithMany("CustomerTransactions")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("AccountingSystem.Models.Product", b =>
                {
                    b.HasOne("AccountingSystem.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AccountingSystem.Models.Unit", "MainUnit")
                        .WithMany("Products")
                        .HasForeignKey("MainUnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("MainUnit");
                });

            modelBuilder.Entity("AccountingSystem.Models.ProductUnit", b =>
                {
                    b.HasOne("AccountingSystem.Models.Product", "Product")
                        .WithMany("ProductUnits")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AccountingSystem.Models.Unit", "Unit")
                        .WithMany("ProductUnits")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("AccountingSystem.Models.PurchaseInvoice", b =>
                {
                    b.HasOne("AccountingSystem.Models.Supplier", "Supplier")
                        .WithMany("PurchaseInvoices")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("AccountingSystem.Models.PurchaseInvoiceDetail", b =>
                {
                    b.HasOne("AccountingSystem.Models.Product", "Product")
                        .WithMany("PurchaseInvoiceDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AccountingSystem.Models.PurchaseInvoice", "PurchaseInvoice")
                        .WithMany("PurchaseInvoiceDetails")
                        .HasForeignKey("PurchaseInvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AccountingSystem.Models.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("PurchaseInvoice");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("AccountingSystem.Models.SalesInvoice", b =>
                {
                    b.HasOne("AccountingSystem.Models.Customer", "Customer")
                        .WithMany("SalesInvoices")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("AccountingSystem.Models.SalesInvoiceDetail", b =>
                {
                    b.HasOne("AccountingSystem.Models.Product", "Product")
                        .WithMany("SalesInvoiceDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AccountingSystem.Models.SalesInvoice", "SalesInvoice")
                        .WithMany("SalesInvoiceDetails")
                        .HasForeignKey("SalesInvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AccountingSystem.Models.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("SalesInvoice");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("AccountingSystem.Models.StockMovement", b =>
                {
                    b.HasOne("AccountingSystem.Models.Product", "Product")
                        .WithMany("StockMovements")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AccountingSystem.Models.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("AccountingSystem.Models.SupplierTransaction", b =>
                {
                    b.HasOne("AccountingSystem.Models.Supplier", "Supplier")
                        .WithMany("SupplierTransactions")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("AccountingSystem.Models.CashBox", b =>
                {
                    b.Navigation("CashTransactions");
                });

            modelBuilder.Entity("AccountingSystem.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("AccountingSystem.Models.Customer", b =>
                {
                    b.Navigation("CustomerTransactions");

                    b.Navigation("SalesInvoices");
                });

            modelBuilder.Entity("AccountingSystem.Models.Product", b =>
                {
                    b.Navigation("ProductUnits");

                    b.Navigation("PurchaseInvoiceDetails");

                    b.Navigation("SalesInvoiceDetails");

                    b.Navigation("StockMovements");
                });

            modelBuilder.Entity("AccountingSystem.Models.PurchaseInvoice", b =>
                {
                    b.Navigation("PurchaseInvoiceDetails");
                });

            modelBuilder.Entity("AccountingSystem.Models.SalesInvoice", b =>
                {
                    b.Navigation("SalesInvoiceDetails");
                });

            modelBuilder.Entity("AccountingSystem.Models.Supplier", b =>
                {
                    b.Navigation("PurchaseInvoices");

                    b.Navigation("SupplierTransactions");
                });

            modelBuilder.Entity("AccountingSystem.Models.Unit", b =>
                {
                    b.Navigation("ProductUnits");

                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
