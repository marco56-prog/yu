// <auto-generated />
using System;
using AccountingSystem.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AccountingSystem.Data.Migrations
{
    [DbContext(typeof(AccountingDbContext))]
    [Migration("20251007223310_AddJournalVoucherModels")]
    partial class AddJournalVoucherModels
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AccountingSystem.Models.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Balance")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Code")
                        .HasMaxLength(20)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("IX_Account_Code")
                        .HasFilter("[Code] IS NOT NULL");

                    b.HasIndex("ParentId");

                    b.ToTable("Accounts", (string)null);
                });

            modelBuilder.Entity("AccountingSystem.Models.AuditLog", b =>
                {
                    b.Property<int>("AuditId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuditId"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Details")
                        .HasMaxLength(1000)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(500)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsSuccessful")
                        .HasColumnType("bit");

                    b.Property<string>("MachineName")
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NewValues")
                        .HasMaxLength(2000)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("OldValues")
                        .HasMaxLength(2000)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int?>("RecordId")
                        .HasColumnType("int");

                    b.Property<string>("Severity")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("TableName")
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("AuditId");

                    b.HasIndex("UserId");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("AccountingSystem.Models.BackupInfo", b =>
                {
                    b.Property<int>("BackupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BackupId"));

                    b.Property<DateTime>("BackupDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("BackupDuration")
                        .HasColumnType("time");

                    b.Property<string>("BackupName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("BackupType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ChecksumMD5")
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(1000)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(500)");

                    b.Property<long>("FileSizeBytes")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsCompressed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEncrypted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSuccessful")
                        .HasColumnType("bit");

                    b.Property<int>("RecordsCount")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("TablesCount")
                        .HasColumnType("int");

                    b.HasKey("BackupId");

                    b.ToTable("BackupInfos");
                });

            modelBuilder.Entity("AccountingSystem.Models.CashBox", b =>
                {
                    b.Property<int>("CashBoxId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CashBoxId"));

                    b.Property<string>("CashBoxName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("CurrentBalance")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(300)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("CashBoxId");

                    b.ToTable("CashBoxes", null, t =>
                        {
                            t.HasCheckConstraint("CK_CashBox_Balance", "[CurrentBalance] >= 0");
                        });

                    b.HasData(
                        new
                        {
                            CashBoxId = 1,
                            CashBoxName = "الخزنة الرئيسية",
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            CurrentBalance = 10000.00m,
                            Description = "الخزنة الرئيسية للشركة - جنيه مصري",
                            IsActive = true,
                            RowVersion = new byte[] { 0, 0, 0, 0, 0, 0, 0, 0 }
                        },
                        new
                        {
                            CashBoxId = 2,
                            CashBoxName = "خزنة الفرع الثاني",
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            CurrentBalance = 5000.00m,
                            Description = "خزنة فرعية للعمليات اليومية",
                            IsActive = true,
                            RowVersion = new byte[] { 0, 0, 0, 0, 0, 0, 0, 0 }
                        });
                });

            modelBuilder.Entity("AccountingSystem.Models.CashDrawerOperation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("BalanceAfter")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("BalanceBefore")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("CashierId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("OperationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("OperationType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Reference")
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("SessionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CashierId");

                    b.HasIndex("SessionId");

                    b.ToTable("CashDrawerOperations", (string)null);
                });

            modelBuilder.Entity("AccountingSystem.Models.CashTransaction", b =>
                {
                    b.Property<int>("CashTransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CashTransactionId"));

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("CashBoxId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("ReferenceId")
                        .HasColumnType("int");

                    b.Property<string>("ReferenceType")
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TransactionNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("TransactionType")
                        .HasColumnType("int");

                    b.HasKey("CashTransactionId");

                    b.HasIndex("CashBoxId");

                    b.HasIndex("TransactionNumber")
                        .IsUnique()
                        .HasDatabaseName("IX_CashTransaction_Number");

                    b.ToTable("CashTransactions", (string)null);
                });

            modelBuilder.Entity("AccountingSystem.Models.Cashier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("CanAccessSettings")
                        .HasColumnType("bit");

                    b.Property<bool>("CanApplyDiscounts")
                        .HasColumnType("bit");

                    b.Property<bool>("CanManageInventory")
                        .HasColumnType("bit");

                    b.Property<bool>("CanOpenCashDrawer")
                        .HasColumnType("bit");

                    b.Property<bool>("CanProcessReturns")
                        .HasColumnType("bit");

                    b.Property<bool>("CanViewReports")
                        .HasColumnType("bit");

                    b.Property<bool>("CanVoidTransactions")
                        .HasColumnType("bit");

                    b.Property<string>("CashierCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLoginTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("MaxDiscountAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MaxDiscountPercent")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(255)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Phone")
                        .HasMaxLength(15)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(15)");

                    b.Property<decimal>("Salary")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Username")
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CashierCode")
                        .IsUnique()
                        .HasDatabaseName("IX_Cashier_Code");

                    b.HasIndex("Username")
                        .IsUnique()
                        .HasDatabaseName("IX_Cashier_Username")
                        .HasFilter("[Username] IS NOT NULL");

                    b.ToTable("Cashiers", (string)null);
                });

            modelBuilder.Entity("AccountingSystem.Models.CashierSession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("CardSalesTotal")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("CashSalesTotal")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("CashierId")
                        .HasColumnType("int");

                    b.Property<decimal>("ClosingBalance")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("ExpectedClosingBalance")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsClosed")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal>("OpeningBalance")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ReturnsCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("TotalDiscounts")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalReturns")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalSales")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("TransactionsCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CashierId", "StartTime")
                        .HasDatabaseName("IX_CashierSession_CashierDate");

                    b.ToTable("CashierSessions", (string)null);
                });

            modelBuilder.Entity("AccountingSystem.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(300)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("CategoryId");

                    b.HasIndex("CategoryName")
                        .IsUnique()
                        .HasDatabaseName("IX_Category_Name");

                    b.ToTable("Categories", (string)null);

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            CategoryName = "عام",
                            Description = "فئة عامة لجميع المنتجات",
                            IsActive = true,
                            RowVersion = new byte[] { 0, 0, 0, 0, 0, 0, 0, 0 }
                        },
                        new
                        {
                            CategoryId = 2,
                            CategoryName = "مواد غذائية",
                            Description = "المواد الغذائية والمشروبات والبقالة",
                            IsActive = true,
                            RowVersion = new byte[] { 0, 0, 0, 0, 0, 0, 0, 0 }
                        },
                        new
                        {
                            CategoryId = 3,
                            CategoryName = "مواد تنظيف",
                            Description = "مواد التنظيف والمطهرات",
                            IsActive = true,
                            RowVersion = new byte[] { 0, 0, 0, 0, 0, 0, 0, 0 }
                        },
                        new
                        {
                            CategoryId = 4,
                            CategoryName = "أدوات منزلية",
                            Description = "الأدوات والأجهزة المنزلية",
                            IsActive = true,
                            RowVersion = new byte[] { 0, 0, 0, 0, 0, 0, 0, 0 }
                        },
                        new
                        {
                            CategoryId = 5,
                            CategoryName = "أجهزة إلكترونية",
                            Description = "الأجهزة الإلكترونية والكهربائية",
                            IsActive = true,
                            RowVersion = new byte[] { 0, 0, 0, 0, 0, 0, 0, 0 }
                        },
                        new
                        {
                            CategoryId = 6,
                            CategoryName = "ملابس",
                            Description = "الملابس والأزياء",
                            IsActive = true,
                            RowVersion = new byte[] { 0, 0, 0, 0, 0, 0, 0, 0 }
                        },
                        new
                        {
                            CategoryId = 7,
                            CategoryName = "أدوية",
                            Description = "الأدوية والمستحضرات الطبية",
                            IsActive = true,
                            RowVersion = new byte[] { 0, 0, 0, 0, 0, 0, 0, 0 }
                        },
                        new
                        {
                            CategoryId = 8,
                            CategoryName = "مستحضرات تجميل",
                            Description = "مستحضرات التجميل والعناية الشخصية",
                            IsActive = true,
                            RowVersion = new byte[] { 0, 0, 0, 0, 0, 0, 0, 0 }
                        });
                });

            modelBuilder.Entity("AccountingSystem.Models.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerId"));

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("Balance")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("CreditLimit")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CustomerCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastPurchaseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("PriceLevelId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<decimal>("TotalPurchases")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("CustomerId");

                    b.HasIndex("CustomerName")
                        .HasDatabaseName("IX_Customer_Name");

                    b.HasIndex("PriceLevelId");

                    b.ToTable("Customers", null, t =>
                        {
                            t.HasCheckConstraint("CK_Customer_Name", "LEN([CustomerName]) > 0");
                        });

                    b.HasData(
                        new
                        {
                            CustomerId = 1,
                            Address = "القاهرة - مدينة نصر - شارع مصطفى النحاس",
                            Balance = 1500.00m,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            CreditLimit = 0m,
                            CustomerCode = "",
                            CustomerName = "أحمد محمد عبد الله",
                            Email = "ahmed.mohamed@gmail.com",
                            IsActive = true,
                            Phone = "01012345678",
                            RowVersion = new byte[] { 0, 0, 0, 0, 0, 0, 0, 0 },
                            TotalPurchases = 0m
                        },
                        new
                        {
                            CustomerId = 2,
                            Address = "الإسكندرية - سموحة - شارع الحجاز",
                            Balance = 0.00m,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            CreditLimit = 0m,
                            CustomerCode = "",
                            CustomerName = "فاطمة علي حسن",
                            Email = "fatma.ali@yahoo.com",
                            IsActive = true,
                            Phone = "01123456789",
                            RowVersion = new byte[] { 0, 0, 0, 0, 0, 0, 0, 0 },
                            TotalPurchases = 0m
                        },
                        new
                        {
                            CustomerId = 3,
                            Address = "الجيزة - الدقي - شارع النيل",
                            Balance = -850.00m,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            CreditLimit = 0m,
                            CustomerCode = "",
                            CustomerName = "محمد حسن إبراهيم",
                            Email = "mohamed.hassan@hotmail.com",
                            IsActive = true,
                            Phone = "01234567890",
                            RowVersion = new byte[] { 0, 0, 0, 0, 0, 0, 0, 0 },
                            TotalPurchases = 0m
                        },
                        new
                        {
                            CustomerId = 4,
                            Address = "القاهرة - المعادي - كورنيش النيل",
                            Balance = 2200.00m,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            CreditLimit = 0m,
                            CustomerCode = "",
                            CustomerName = "مريم أحمد سالم",
                            Email = "maryam.ahmed@gmail.com",
                            IsActive = true,
                            Phone = "01098765432",
                            RowVersion = new byte[] { 0, 0, 0, 0, 0, 0, 0, 0 },
                            TotalPurchases = 0m
                        },
                        new
                        {
                            CustomerId = 5,
                            Address = "الإسكندرية - العجمي - طريق الساحل الشمالي",
                            Balance = 0.00m,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            CreditLimit = 0m,
                            CustomerCode = "",
                            CustomerName = "عمر محمود طه",
                            Email = "omar.mahmoud@live.com",
                            IsActive = true,
                            Phone = "01156789012",
                            RowVersion = new byte[] { 0, 0, 0, 0, 0, 0, 0, 0 },
                            TotalPurchases = 0m
                        },
                        new
                        {
                            CustomerId = 6,
                            Address = "الجيزة - الهرم - شارع الهرم الرئيسي",
                            Balance = 650.00m,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            CreditLimit = 0m,
                            CustomerCode = "",
                            CustomerName = "نور الدين عبد الرحمن",
                            Email = "nour.eldin@outlook.com",
                            IsActive = true,
                            Phone = "01267890123",
                            RowVersion = new byte[] { 0, 0, 0, 0, 0, 0, 0, 0 },
                            TotalPurchases = 0m
                        });
                });

            modelBuilder.Entity("AccountingSystem.Models.CustomerLoyaltyPoint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastEarnedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastRedeemedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("LoyaltyProgramId")
                        .HasColumnType("int");

                    b.Property<int>("PointsBalance")
                        .HasColumnType("int");

                    b.Property<int>("PointsEarned")
                        .HasColumnType("int");

                    b.Property<int>("PointsRedeemed")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("LoyaltyProgramId");

                    b.ToTable("CustomerLoyaltyPoints", (string)null);
                });

            modelBuilder.Entity("AccountingSystem.Models.CustomerTransaction", b =>
                {
                    b.Property<int>("CustomerTransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerTransactionId"));

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("ReferenceId")
                        .HasColumnType("int");

                    b.Property<string>("ReferenceType")
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TransactionNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("TransactionType")
                        .HasColumnType("int");

                    b.HasKey("CustomerTransactionId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("TransactionNumber")
                        .IsUnique()
                        .HasDatabaseName("IX_CustomerTransaction_Number");

                    b.ToTable("CustomerTransactions", (string)null);
                });

            modelBuilder.Entity("AccountingSystem.Models.DataSecurity", b =>
                {
                    b.Property<int>("SecurityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SecurityId"));

                    b.Property<string>("AccessType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Conditions")
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAllowed")
                        .HasColumnType("bit");

                    b.Property<int?>("RecordId")
                        .HasColumnType("int");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("SecurityId");

                    b.HasIndex("UserId");

                    b.ToTable("DataSecurities");
                });

            modelBuilder.Entity("AccountingSystem.Models.Discount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApplicableOn")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("DiscountCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DiscountType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("DiscountValue")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<decimal?>("MaximumDiscount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("MinimumAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<bool>("RequiresApproval")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TimesUsed")
                        .HasColumnType("int");

                    b.Property<int>("UsageLimit")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("DiscountCode")
                        .IsUnique()
                        .HasDatabaseName("IX_Discount_Code");

                    b.HasIndex("ProductId");

                    b.ToTable("Discounts", (string)null);
                });

            modelBuilder.Entity("AccountingSystem.Models.DiscountRule", b =>
                {
                    b.Property<int>("DiscountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DiscountId"));

                    b.Property<bool>("ApplyToAllProducts")
                        .HasColumnType("bit");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("DiscountName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("DiscountPercentage")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal>("FixedDiscountAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<decimal>("MaxQuantity")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MinQuantity")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ValidTo")
                        .HasColumnType("datetime2");

                    b.HasKey("DiscountId");

                    b.HasIndex("DiscountName")
                        .IsUnique();

                    b.ToTable("DiscountRules");
                });

            modelBuilder.Entity("AccountingSystem.Models.ErrorLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Activity")
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("AdditionalData")
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Comments")
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CorrelationId")
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Details")
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ErrorId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ErrorType")
                        .HasColumnType("int");

                    b.Property<string>("FileName")
                        .HasMaxLength(500)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("InnerException")
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(45)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(45)");

                    b.Property<bool>("IsStarred")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastOccurrence")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LineNumber")
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("MethodName")
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("NotificationSent")
                        .HasColumnType("bit");

                    b.Property<int>("OccurrenceCount")
                        .HasColumnType("int");

                    b.Property<string>("RequestData")
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ResolutionNotes")
                        .HasMaxLength(1000)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("ResolvedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ResolvedBy")
                        .HasColumnType("int");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Severity")
                        .HasColumnType("int");

                    b.Property<string>("Signature")
                        .IsRequired()
                        .HasMaxLength(64)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("Source")
                        .HasMaxLength(500)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("StackTrace")
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(1000)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("ErrorId")
                        .IsUnique();

                    b.HasIndex("ErrorType");

                    b.HasIndex("ResolvedBy");

                    b.HasIndex("Severity");

                    b.HasIndex("Status");

                    b.HasIndex("UserId");

                    b.HasIndex("CreatedAt", "ErrorType");

                    b.HasIndex("Status", "Severity");

                    b.ToTable("ErrorLogs", (string)null);
                });

            modelBuilder.Entity("AccountingSystem.Models.ErrorLogComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ErrorLogId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("ErrorLogId");

                    b.HasIndex("UserId");

                    b.ToTable("ErrorLogComments", (string)null);
                });

            modelBuilder.Entity("AccountingSystem.Models.JournalVoucher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("PostedBy")
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("PostedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("VoucherNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("VoucherNumber")
                        .IsUnique()
                        .HasDatabaseName("IX_JournalVoucher_Number");

                    b.ToTable("JournalVouchers", (string)null);
                });

            modelBuilder.Entity("AccountingSystem.Models.JournalVoucherDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<decimal>("Credit")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Debit")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("JournalVoucherId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("JournalVoucherId");

                    b.ToTable("JournalVoucherDetails", (string)null);
                });

            modelBuilder.Entity("AccountingSystem.Models.LoyaltyProgram", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("AmountPerPoint")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<decimal>("MinimumRedemption")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("PointValue")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("LoyaltyPrograms", (string)null);
                });

            modelBuilder.Entity("AccountingSystem.Models.LoyaltyTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CustomerLoyaltyPointId")
                        .HasColumnType("int");

                    b.Property<decimal?>("MonetaryValue")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("POSTransactionId")
                        .HasColumnType("int");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerLoyaltyPointId");

                    b.HasIndex("POSTransactionId");

                    b.ToTable("LoyaltyTransactions", (string)null);
                });

            modelBuilder.Entity("AccountingSystem.Models.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationId"));

                    b.Property<DateTime?>("AcknowledgedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ActionUrl")
                        .HasMaxLength(500)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Color")
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Icon")
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsAutoGenerated")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ReadDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ReferenceId")
                        .HasColumnType("int");

                    b.Property<string>("ReferenceType")
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("RequiresAction")
                        .HasColumnType("bit");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("TargetUserId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("NotificationId");

                    b.HasIndex("TargetUserId");

                    b.ToTable("Notifications");

                    b.HasData(
                        new
                        {
                            NotificationId = 1,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2023, 12, 31, 22, 0, 0, 0, DateTimeKind.Local),
                            IsAutoGenerated = true,
                            Message = "مخزون المنتج 'قهوة محمصة' أصبح أقل من الحد الأدنى (5 من أصل 20)",
                            Priority = 3,
                            ReferenceId = 18,
                            ReferenceType = "Product",
                            RequiresAction = false,
                            Status = 1,
                            Title = "تحذير: نفاد مخزون",
                            Type = 1
                        },
                        new
                        {
                            NotificationId = 2,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2023, 12, 31, 19, 0, 0, 0, DateTimeKind.Local),
                            IsAutoGenerated = true,
                            Message = "مخزون المنتج 'جبنة رومي' أصبح أقل من الحد الأدنى (8 من أصل 15)",
                            Priority = 2,
                            ReferenceId = 19,
                            ReferenceType = "Product",
                            RequiresAction = false,
                            Status = 1,
                            Title = "تحذير: نفاد مخزون",
                            Type = 1
                        },
                        new
                        {
                            NotificationId = 3,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2023, 12, 31, 0, 0, 0, 0, DateTimeKind.Local),
                            IsAutoGenerated = true,
                            Message = "تم إنشاء فاتورة مبيعات جديدة S-2024-008 بقيمة 20,775 جنيه",
                            Priority = 2,
                            ReadDate = new DateTime(2023, 12, 31, 23, 0, 0, 0, DateTimeKind.Local),
                            ReferenceId = 8,
                            ReferenceType = "SalesInvoice",
                            RequiresAction = false,
                            Status = 2,
                            Title = "فاتورة جديدة",
                            Type = 5
                        },
                        new
                        {
                            NotificationId = 4,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2023, 12, 25, 0, 0, 0, 0, DateTimeKind.Local),
                            IsAutoGenerated = true,
                            Message = "يوجد مبلغ مستحق للمورد 'شركة الأهرام للمواد الغذائية' قدره 15,000 جنيه",
                            Priority = 3,
                            ReferenceId = 1,
                            ReferenceType = "Supplier",
                            RequiresAction = false,
                            Status = 3,
                            Title = "دفعة مستحقة",
                            Type = 7
                        },
                        new
                        {
                            NotificationId = 5,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2023, 12, 29, 0, 0, 0, 0, DateTimeKind.Local),
                            IsAutoGenerated = true,
                            Message = "تم تحقيق 85% من هدف مبيعات الشهر الحالي. المطلوب: 50,000 ج.م، المُحقق: 42,500 ج.م",
                            Priority = 1,
                            ReadDate = new DateTime(2023, 12, 30, 0, 0, 0, 0, DateTimeKind.Local),
                            RequiresAction = false,
                            Status = 2,
                            Title = "هدف المبيعات",
                            Type = 5
                        },
                        new
                        {
                            NotificationId = 6,
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2023, 12, 31, 0, 0, 0, 0, DateTimeKind.Local),
                            IsAutoGenerated = true,
                            Message = "المستخدم 'admin' قام بتسجيل الدخول من عنوان IP جديد",
                            Priority = 1,
                            RequiresAction = false,
                            Status = 4,
                            Title = "نشاط المستخدم",
                            Type = 9
                        });
                });

            modelBuilder.Entity("AccountingSystem.Models.NotificationAction", b =>
                {
                    b.Property<int>("ActionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ActionId"));

                    b.Property<string>("ActionBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ActionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ActionDescription")
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ActionType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("NotificationId")
                        .HasColumnType("int");

                    b.HasKey("ActionId");

                    b.HasIndex("NotificationId");

                    b.ToTable("NotificationActions");
                });

            modelBuilder.Entity("AccountingSystem.Models.NotificationLog", b =>
                {
                    b.Property<int>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LogId"));

                    b.Property<DateTime?>("DeliveredDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeliveryMethod")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DeviceInfo")
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(500)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("IPAddress")
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsDelivered")
                        .HasColumnType("bit");

                    b.Property<int>("NotificationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LogId");

                    b.HasIndex("NotificationId");

                    b.HasIndex("UserId");

                    b.ToTable("NotificationLogs");
                });

            modelBuilder.Entity("AccountingSystem.Models.NotificationRule", b =>
                {
                    b.Property<int>("RuleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RuleId"));

                    b.Property<string>("ConditionParameters")
                        .HasMaxLength(1000)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(300)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRepeating")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastTriggered")
                        .HasColumnType("datetime2");

                    b.Property<int>("MaxRepetitions")
                        .HasColumnType("int");

                    b.Property<string>("MessageTemplate")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("NotificationType")
                        .HasColumnType("int");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<int>("RepeatIntervalMinutes")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("RuleName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TitleTemplate")
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("TriggerCondition")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("RuleId");

                    b.ToTable("NotificationRules");
                });

            modelBuilder.Entity("AccountingSystem.Models.NotificationSettings", b =>
                {
                    b.Property<int>("SettingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SettingId"));

                    b.Property<int>("AutoSnoozeDuration")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("EnableAutoSnooze")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<int>("MinimumPriority")
                        .HasColumnType("int");

                    b.Property<int>("NotificationType")
                        .HasColumnType("int");

                    b.Property<bool>("PlaySound")
                        .HasColumnType("bit");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<bool>("SendEmail")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowPopup")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("SettingId");

                    b.HasIndex("UserId");

                    b.ToTable("NotificationSettings");
                });

            modelBuilder.Entity("AccountingSystem.Models.NumberSequence", b =>
                {
                    b.Property<int>("SequenceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SequenceId"));

                    b.Property<int>("CurrentNumber")
                        .HasColumnType("int");

                    b.Property<int>("NumberLength")
                        .HasColumnType("int");

                    b.Property<string>("Prefix")
                        .HasMaxLength(20)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(20)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("SequenceType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Suffix")
                        .HasMaxLength(20)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("SequenceId");

                    b.HasIndex("SequenceType")
                        .IsUnique()
                        .HasDatabaseName("IX_NumberSequence_Type");

                    b.ToTable("NumberSequences", (string)null);

                    b.HasData(
                        new
                        {
                            SequenceId = 1,
                            CurrentNumber = 0,
                            NumberLength = 6,
                            Prefix = "S",
                            RowVersion = new byte[] { 0, 0, 0, 0, 0, 0, 0, 0 },
                            SequenceType = "SalesInvoice",
                            UpdatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            SequenceId = 2,
                            CurrentNumber = 0,
                            NumberLength = 6,
                            Prefix = "P",
                            RowVersion = new byte[] { 0, 0, 0, 0, 0, 0, 0, 0 },
                            SequenceType = "PurchaseInvoice",
                            UpdatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            SequenceId = 3,
                            CurrentNumber = 0,
                            NumberLength = 6,
                            Prefix = "C",
                            RowVersion = new byte[] { 0, 0, 0, 0, 0, 0, 0, 0 },
                            SequenceType = "Customer",
                            UpdatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            SequenceId = 4,
                            CurrentNumber = 0,
                            NumberLength = 6,
                            Prefix = "SP",
                            RowVersion = new byte[] { 0, 0, 0, 0, 0, 0, 0, 0 },
                            SequenceType = "Supplier",
                            UpdatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            SequenceId = 5,
                            CurrentNumber = 0,
                            NumberLength = 6,
                            Prefix = "PR",
                            RowVersion = new byte[] { 0, 0, 0, 0, 0, 0, 0, 0 },
                            SequenceType = "Product",
                            UpdatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            SequenceId = 6,
                            CurrentNumber = 0,
                            NumberLength = 6,
                            Prefix = "CT",
                            RowVersion = new byte[] { 0, 0, 0, 0, 0, 0, 0, 0 },
                            SequenceType = "CashTransaction",
                            UpdatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            SequenceId = 7,
                            CurrentNumber = 0,
                            NumberLength = 6,
                            Prefix = "CuT",
                            RowVersion = new byte[] { 0, 0, 0, 0, 0, 0, 0, 0 },
                            SequenceType = "CustomerTransaction",
                            UpdatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            SequenceId = 8,
                            CurrentNumber = 0,
                            NumberLength = 6,
                            Prefix = "SuT",
                            RowVersion = new byte[] { 0, 0, 0, 0, 0, 0, 0, 0 },
                            SequenceType = "SupplierTransaction",
                            UpdatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            SequenceId = 9,
                            CurrentNumber = 0,
                            NumberLength = 6,
                            Prefix = "SM",
                            RowVersion = new byte[] { 0, 0, 0, 0, 0, 0, 0, 0 },
                            SequenceType = "StockMovement",
                            UpdatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Local)
                        });
                });

            modelBuilder.Entity("AccountingSystem.Models.POSPayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("PaymentTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Reference")
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("TransactionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TransactionId");

                    b.ToTable("POSPayments", (string)null);
                });

            modelBuilder.Entity("AccountingSystem.Models.POSTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("AmountPaid")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("CashierId")
                        .HasColumnType("int");

                    b.Property<decimal>("ChangeAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<decimal>("DiscountAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("DiscountPercent")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<bool>("IsPrinted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVoided")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PaymentReference")
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("SessionId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Subtotal")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,3)");

                    b.Property<decimal>("TaxAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TaxRate")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal>("Total")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TransactionNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("VoidReason")
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("VoidedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CashierId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("SessionId");

                    b.HasIndex("TransactionDate")
                        .HasDatabaseName("IX_POSTransaction_Date");

                    b.HasIndex("TransactionNumber")
                        .IsUnique()
                        .HasDatabaseName("IX_POSTransaction_Number");

                    b.ToTable("POSTransactions", (string)null);
                });

            modelBuilder.Entity("AccountingSystem.Models.POSTransactionItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("DiscountAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("DiscountPercent")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal>("LineTotal")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<decimal>("Quantity")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,3)");

                    b.Property<decimal>("TaxAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("TransactionId")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("TransactionId");

                    b.ToTable("POSTransactionItems", (string)null);
                });

            modelBuilder.Entity("AccountingSystem.Models.Permission", b =>
                {
                    b.Property<int>("PermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PermissionId"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsSystemPermission")
                        .HasColumnType("bit");

                    b.Property<string>("PermissionCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PermissionName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("PermissionId");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("AccountingSystem.Models.PriceLevel", b =>
                {
                    b.Property<int>("PriceLevelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PriceLevelId"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("DiscountPercentage")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("LevelName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("MinimumOrderAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("PriceLevelId");

                    b.ToTable("PriceLevels");
                });

            modelBuilder.Entity("AccountingSystem.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<string>("Barcode")
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("CurrentStock")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("HasExpiryDate")
                        .HasColumnType("bit");

                    b.Property<string>("ImagePath")
                        .HasMaxLength(500)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSerialNumberRequired")
                        .HasColumnType("bit");

                    b.Property<int>("MainUnitId")
                        .HasColumnType("int");

                    b.Property<decimal>("MinimumStock")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("ProductCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("PurchasePrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<decimal>("SalePrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("WarehouseId")
                        .HasColumnType("int");

                    b.Property<decimal>("Weight")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(10,3)");

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("MainUnitId");

                    b.HasIndex("ProductCode")
                        .IsUnique()
                        .HasDatabaseName("IX_Product_Code");

                    b.ToTable("Products", null, t =>
                        {
                            t.HasCheckConstraint("CK_Product_Prices", "[PurchasePrice] >= 0 AND [SalePrice] >= 0");

                            t.HasCheckConstraint("CK_Product_Stock", "[CurrentStock] >= 0 AND [MinimumStock] >= 0");
                        });

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            CategoryId = 2,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            CurrentStock = 500m,
                            Description = "أرز أبيض من النوع الممتاز - منتج محلي",
                            HasExpiryDate = false,
                            IsActive = true,
                            IsSerialNumberRequired = false,
                            MainUnitId = 2,
                            MinimumStock = 50m,
                            ProductCode = "FD001",
                            ProductName = "أرز أبيض مصري",
                            PurchasePrice = 28.50m,
                            RowVersion = new byte[] { 0, 0, 0, 0, 0, 0, 0, 0 },
                            SalePrice = 35.00m,
                            Weight = 0m
                        },
                        new
                        {
                            ProductId = 2,
                            CategoryId = 2,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            CurrentStock = 200m,
                            Description = "زيت طعام سولنزا - 1 لتر",
                            HasExpiryDate = false,
                            IsActive = true,
                            IsSerialNumberRequired = false,
                            MainUnitId = 3,
                            MinimumStock = 20m,
                            ProductCode = "FD002",
                            ProductName = "زيت طعام سولنزا",
                            PurchasePrice = 48.00m,
                            RowVersion = new byte[] { 0, 0, 0, 0, 0, 0, 0, 0 },
                            SalePrice = 58.00m,
                            Weight = 0m
                        },
                        new
                        {
                            ProductId = 3,
                            CategoryId = 2,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            CurrentStock = 300m,
                            Description = "سكر أبيض ناعم - منتج محلي",
                            HasExpiryDate = false,
                            IsActive = true,
                            IsSerialNumberRequired = false,
                            MainUnitId = 2,
                            MinimumStock = 30m,
                            ProductCode = "FD003",
                            ProductName = "سكر أبيض مصري",
                            PurchasePrice = 22.00m,
                            RowVersion = new byte[] { 0, 0, 0, 0, 0, 0, 0, 0 },
                            SalePrice = 28.00m,
                            Weight = 0m
                        },
                        new
                        {
                            ProductId = 4,
                            CategoryId = 2,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            CurrentStock = 150m,
                            Description = "شاي أحمد إيرل جراي - 100 كيس",
                            HasExpiryDate = false,
                            IsActive = true,
                            IsSerialNumberRequired = false,
                            MainUnitId = 5,
                            MinimumStock = 15m,
                            ProductCode = "FD004",
                            ProductName = "شاي أحمد",
                            PurchasePrice = 42.00m,
                            RowVersion = new byte[] { 0, 0, 0, 0, 0, 0, 0, 0 },
                            SalePrice = 52.00m,
                            Weight = 0m
                        },
                        new
                        {
                            ProductId = 5,
                            CategoryId = 2,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            CurrentStock = 400m,
                            Description = "مكرونة الوادي بنة - 500 جرام",
                            HasExpiryDate = false,
                            IsActive = true,
                            IsSerialNumberRequired = false,
                            MainUnitId = 5,
                            MinimumStock = 40m,
                            ProductCode = "FD005",
                            ProductName = "مكرونة الوادي",
                            PurchasePrice = 8.50m,
                            RowVersion = new byte[] { 0, 0, 0, 0, 0, 0, 0, 0 },
                            SalePrice = 12.00m,
                            Weight = 0m
                        },
                        new
                        {
                            ProductId = 6,
                            CategoryId = 2,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            CurrentStock = 180m,
                            Description = "عدس أحمر مستورد - درجة أولى",
                            HasExpiryDate = false,
                            IsActive = true,
                            IsSerialNumberRequired = false,
                            MainUnitId = 2,
                            MinimumStock = 25m,
                            ProductCode = "FD006",
                            ProductName = "عدس أحمر",
                            PurchasePrice = 35.00m,
                            RowVersion = new byte[] { 0, 0, 0, 0, 0, 0, 0, 0 },
                            SalePrice = 42.00m,
                            Weight = 0m
                        },
                        new
                        {
                            ProductId = 7,
                            CategoryId = 2,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            CurrentStock = 250m,
                            Description = "ملح طعام مكرر - 1 كيلو",
                            HasExpiryDate = false,
                            IsActive = true,
                            IsSerialNumberRequired = false,
                            MainUnitId = 5,
                            MinimumStock = 30m,
                            ProductCode = "FD007",
                            ProductName = "ملح طعام جوهرة",
                            PurchasePrice = 5.00m,
                            RowVersion = new byte[] { 0, 0, 0, 0, 0, 0, 0, 0 },
                            SalePrice = 7.50m,
                            Weight = 0m
                        },
                        new
                        {
                            ProductId = 8,
                            CategoryId = 2,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            CurrentStock = 80m,
                            Description = "عسل نحل طبيعي من المناحل المصرية - 1 كيلو",
                            HasExpiryDate = false,
                            IsActive = true,
                            IsSerialNumberRequired = false,
                            MainUnitId = 5,
                            MinimumStock = 10m,
                            ProductCode = "FD008",
                            ProductName = "عسل نحل طبيعي",
                            PurchasePrice = 180.00m,
                            RowVersion = new byte[] { 0, 0, 0, 0, 0, 0, 0, 0 },
                            SalePrice = 225.00m,
                            Weight = 0m
                        },
                        new
                        {
                            ProductId = 9,
                            CategoryId = 3,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            CurrentStock = 100m,
                            Description = "مسحوق غسيل أريال - 3 كيلو",
                            HasExpiryDate = false,
                            IsActive = true,
                            IsSerialNumberRequired = false,
                            MainUnitId = 5,
                            MinimumStock = 10m,
                            ProductCode = "CL001",
                            ProductName = "صابون أريال",
                            PurchasePrice = 75.00m,
                            RowVersion = new byte[] { 0, 0, 0, 0, 0, 0, 0, 0 },
                            SalePrice = 90.00m,
                            Weight = 0m
                        },
                        new
                        {
                            ProductId = 10,
                            CategoryId = 3,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            CurrentStock = 80m,
                            Description = "سائل تنظيف أطباق فيري - 1 لتر",
                            HasExpiryDate = false,
                            IsActive = true,
                            IsSerialNumberRequired = false,
                            MainUnitId = 5,
                            MinimumStock = 8m,
                            ProductCode = "CL002",
                            ProductName = "منظف فيري",
                            PurchasePrice = 32.00m,
                            RowVersion = new byte[] { 0, 0, 0, 0, 0, 0, 0, 0 },
                            SalePrice = 42.00m,
                            Weight = 0m
                        },
                        new
                        {
                            ProductId = 11,
                            CategoryId = 3,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            CurrentStock = 120m,
                            Description = "معقم ديتول متعدد الاستخدامات - 750 مل",
                            HasExpiryDate = false,
                            IsActive = true,
                            IsSerialNumberRequired = false,
                            MainUnitId = 5,
                            MinimumStock = 15m,
                            ProductCode = "CL003",
                            ProductName = "معقم ديتول",
                            PurchasePrice = 28.00m,
                            RowVersion = new byte[] { 0, 0, 0, 0, 0, 0, 0, 0 },
                            SalePrice = 38.00m,
                            Weight = 0m
                        },
                        new
                        {
                            ProductId = 12,
                            CategoryId = 4,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            CurrentStock = 25m,
                            Description = "مقلاة تيفال غير لاصقة - 26 سم",
                            HasExpiryDate = false,
                            IsActive = true,
                            IsSerialNumberRequired = false,
                            MainUnitId = 1,
                            MinimumStock = 5m,
                            ProductCode = "HW001",
                            ProductName = "مقلاة تيفال",
                            PurchasePrice = 180.00m,
                            RowVersion = new byte[] { 0, 0, 0, 0, 0, 0, 0, 0 },
                            SalePrice = 230.00m,
                            Weight = 0m
                        },
                        new
                        {
                            ProductId = 13,
                            CategoryId = 4,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            CurrentStock = 15m,
                            Description = "خلاط موليكس 3 سرعات - 400 واط",
                            HasExpiryDate = false,
                            IsActive = true,
                            IsSerialNumberRequired = false,
                            MainUnitId = 1,
                            MinimumStock = 3m,
                            ProductCode = "HW002",
                            ProductName = "خلاط موليكس",
                            PurchasePrice = 420.00m,
                            RowVersion = new byte[] { 0, 0, 0, 0, 0, 0, 0, 0 },
                            SalePrice = 520.00m,
                            Weight = 0m
                        },
                        new
                        {
                            ProductId = 14,
                            CategoryId = 4,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            CurrentStock = 35m,
                            Description = "طقم 6 أكواب زجاجية شفافة",
                            HasExpiryDate = false,
                            IsActive = true,
                            IsSerialNumberRequired = false,
                            MainUnitId = 1,
                            MinimumStock = 8m,
                            ProductCode = "HW003",
                            ProductName = "طقم أكواب زجاجية",
                            PurchasePrice = 85.00m,
                            RowVersion = new byte[] { 0, 0, 0, 0, 0, 0, 0, 0 },
                            SalePrice = 120.00m,
                            Weight = 0m
                        },
                        new
                        {
                            ProductId = 15,
                            CategoryId = 5,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            CurrentStock = 10m,
                            Description = "تليفزيون سامسونج LED 43 بوصة",
                            HasExpiryDate = false,
                            IsActive = true,
                            IsSerialNumberRequired = false,
                            MainUnitId = 1,
                            MinimumStock = 2m,
                            ProductCode = "EL001",
                            ProductName = "تليفزيون سامسونج",
                            PurchasePrice = 8500.00m,
                            RowVersion = new byte[] { 0, 0, 0, 0, 0, 0, 0, 0 },
                            SalePrice = 10200.00m,
                            Weight = 0m
                        },
                        new
                        {
                            ProductId = 16,
                            CategoryId = 5,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            CurrentStock = 20m,
                            Description = "سامسونج جالاكسي A54 - 128 جيجا",
                            HasExpiryDate = false,
                            IsActive = true,
                            IsSerialNumberRequired = false,
                            MainUnitId = 1,
                            MinimumStock = 5m,
                            ProductCode = "EL002",
                            ProductName = "موبايل سامسونج",
                            PurchasePrice = 12000.00m,
                            RowVersion = new byte[] { 0, 0, 0, 0, 0, 0, 0, 0 },
                            SalePrice = 14500.00m,
                            Weight = 0m
                        },
                        new
                        {
                            ProductId = 17,
                            CategoryId = 5,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            CurrentStock = 8m,
                            Description = "لاب توب ديل Inspiron 15 - Intel i5",
                            HasExpiryDate = false,
                            IsActive = true,
                            IsSerialNumberRequired = false,
                            MainUnitId = 1,
                            MinimumStock = 2m,
                            ProductCode = "EL003",
                            ProductName = "لاب توب ديل",
                            PurchasePrice = 18000.00m,
                            RowVersion = new byte[] { 0, 0, 0, 0, 0, 0, 0, 0 },
                            SalePrice = 22000.00m,
                            Weight = 0m
                        },
                        new
                        {
                            ProductId = 18,
                            CategoryId = 2,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            CurrentStock = 5m,
                            Description = "قهوة عربية محمصة - 250 جرام",
                            HasExpiryDate = false,
                            IsActive = true,
                            IsSerialNumberRequired = false,
                            MainUnitId = 5,
                            MinimumStock = 20m,
                            ProductCode = "FD009",
                            ProductName = "قهوة محمصة",
                            PurchasePrice = 45.00m,
                            RowVersion = new byte[] { 0, 0, 0, 0, 0, 0, 0, 0 },
                            SalePrice = 60.00m,
                            Weight = 0m
                        },
                        new
                        {
                            ProductId = 19,
                            CategoryId = 2,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            CurrentStock = 8m,
                            Description = "جبنة رومي مصرية - 1 كيلو",
                            HasExpiryDate = false,
                            IsActive = true,
                            IsSerialNumberRequired = false,
                            MainUnitId = 2,
                            MinimumStock = 15m,
                            ProductCode = "FD010",
                            ProductName = "جبنة رومي",
                            PurchasePrice = 120.00m,
                            RowVersion = new byte[] { 0, 0, 0, 0, 0, 0, 0, 0 },
                            SalePrice = 155.00m,
                            Weight = 0m
                        },
                        new
                        {
                            ProductId = 20,
                            CategoryId = 4,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            CurrentStock = 12m,
                            Description = "ماكينة قهوة إسبريسو كهربائية",
                            HasExpiryDate = false,
                            IsActive = true,
                            IsSerialNumberRequired = false,
                            MainUnitId = 1,
                            MinimumStock = 3m,
                            ProductCode = "HW004",
                            ProductName = "ماكينة قهوة",
                            PurchasePrice = 850.00m,
                            RowVersion = new byte[] { 0, 0, 0, 0, 0, 0, 0, 0 },
                            SalePrice = 1100.00m,
                            Weight = 0m
                        });
                });

            modelBuilder.Entity("AccountingSystem.Models.ProductPriceHistory", b =>
                {
                    b.Property<int>("PriceHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PriceHistoryId"));

                    b.Property<DateTime>("ChangeDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChangedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("NewCost")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("NewPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("OldCost")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("OldPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("PriceHistoryId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductPriceHistories");
                });

            modelBuilder.Entity("AccountingSystem.Models.ProductStock", b =>
                {
                    b.Property<int>("ProductStockId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductStockId"));

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("MinimumStock")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,4)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<decimal>("Quantity")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("ReservedQuantity")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,4)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("int");

                    b.HasKey("ProductStockId");

                    b.HasIndex("WarehouseId");

                    b.HasIndex("ProductId", "WarehouseId")
                        .IsUnique();

                    b.ToTable("ProductStocks");
                });

            modelBuilder.Entity("AccountingSystem.Models.ProductUnit", b =>
                {
                    b.Property<int>("ProductUnitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductUnitId"));

                    b.Property<decimal>("ConversionFactor")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.HasKey("ProductUnitId");

                    b.HasIndex("UnitId");

                    b.HasIndex(new[] { "ProductId", "UnitId" }, "UX_ProductUnit_Product_Unit")
                        .IsUnique();

                    b.ToTable("ProductUnits", (string)null);

                    b.HasData(
                        new
                        {
                            ProductUnitId = 1,
                            ConversionFactor = 25.0m,
                            IsActive = true,
                            ProductId = 1,
                            RowVersion = new byte[] { 0, 0, 0, 0, 0, 0, 0, 0 },
                            UnitId = 5
                        },
                        new
                        {
                            ProductUnitId = 2,
                            ConversionFactor = 1000.0m,
                            IsActive = true,
                            ProductId = 1,
                            RowVersion = new byte[] { 0, 0, 0, 0, 0, 0, 0, 0 },
                            UnitId = 6
                        },
                        new
                        {
                            ProductUnitId = 3,
                            ConversionFactor = 50.0m,
                            IsActive = true,
                            ProductId = 3,
                            RowVersion = new byte[] { 0, 0, 0, 0, 0, 0, 0, 0 },
                            UnitId = 5
                        },
                        new
                        {
                            ProductUnitId = 4,
                            ConversionFactor = 0.001m,
                            IsActive = true,
                            ProductId = 3,
                            RowVersion = new byte[] { 0, 0, 0, 0, 0, 0, 0, 0 },
                            UnitId = 7
                        },
                        new
                        {
                            ProductUnitId = 5,
                            ConversionFactor = 12.0m,
                            IsActive = true,
                            ProductId = 5,
                            RowVersion = new byte[] { 0, 0, 0, 0, 0, 0, 0, 0 },
                            UnitId = 6
                        },
                        new
                        {
                            ProductUnitId = 6,
                            ConversionFactor = 3.0m,
                            IsActive = true,
                            ProductId = 5,
                            RowVersion = new byte[] { 0, 0, 0, 0, 0, 0, 0, 0 },
                            UnitId = 2
                        });
                });

            modelBuilder.Entity("AccountingSystem.Models.Promotion", b =>
                {
                    b.Property<int>("PromotionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PromotionId"));

                    b.Property<bool>("AutoApply")
                        .HasColumnType("bit");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal>("DiscountPercentage")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("FixedDiscountAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<decimal>("MinimumPurchaseAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PromotionName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("PromotionId");

                    b.ToTable("Promotions");
                });

            modelBuilder.Entity("AccountingSystem.Models.PurchaseInvoice", b =>
                {
                    b.Property<int>("PurchaseInvoiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PurchaseInvoiceId"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("DiscountAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InvoiceNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("IsPosted")
                        .HasColumnType("bit");

                    b.Property<decimal>("NetTotal")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal>("PaidAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("RemainingAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("SubTotal")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.Property<decimal>("TaxAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("PurchaseInvoiceId");

                    b.HasIndex("InvoiceNumber")
                        .IsUnique()
                        .HasDatabaseName("IX_PurchaseInvoice_Number");

                    b.HasIndex("SupplierId");

                    b.ToTable("PurchaseInvoices", (string)null);
                });

            modelBuilder.Entity("AccountingSystem.Models.PurchaseInvoiceItem", b =>
                {
                    b.Property<int>("PurchaseInvoiceItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PurchaseInvoiceItemId"));

                    b.Property<decimal>("DiscountAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("DiscountPercentage")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal>("LineTotal")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("PurchaseInvoiceId")
                        .HasColumnType("int");

                    b.Property<decimal>("Quantity")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,3)");

                    b.Property<decimal>("UnitCost")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("UnitId")
                        .HasColumnType("int");

                    b.HasKey("PurchaseInvoiceItemId");

                    b.HasIndex("ProductId");

                    b.HasIndex("PurchaseInvoiceId");

                    b.HasIndex("UnitId");

                    b.ToTable("PurchaseInvoiceItems", (string)null);
                });

            modelBuilder.Entity("AccountingSystem.Models.PurchaseReturn", b =>
                {
                    b.Property<int>("PurchaseReturnId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PurchaseReturnId"));

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<decimal>("NetTotal")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("OriginalPurchaseInvoiceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReturnDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("SubTotal")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.Property<decimal>("TaxAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("PurchaseReturnId");

                    b.HasIndex("OriginalPurchaseInvoiceId");

                    b.HasIndex("SupplierId");

                    b.ToTable("PurchaseReturns");
                });

            modelBuilder.Entity("AccountingSystem.Models.PurchaseReturnDetail", b =>
                {
                    b.Property<int>("PurchaseReturnDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PurchaseReturnDetailId"));

                    b.Property<int?>("OriginalInvoiceDetailId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("PurchaseReturnId")
                        .HasColumnType("int");

                    b.Property<decimal>("Quantity")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,3)");

                    b.Property<string>("ReturnReason")
                        .HasMaxLength(300)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(300)");

                    b.Property<decimal>("TotalPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("UnitId")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("PurchaseReturnDetailId");

                    b.HasIndex("ProductId");

                    b.HasIndex("PurchaseReturnId");

                    b.HasIndex("UnitId");

                    b.ToTable("PurchaseReturnDetails");
                });

            modelBuilder.Entity("AccountingSystem.Models.Representative", b =>
                {
                    b.Property<int>("RepresentativeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RepresentativeId"));

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal>("CommissionRate")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("RepresentativeCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RepresentativeName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("RepresentativeId");

                    b.ToTable("Representatives");
                });

            modelBuilder.Entity("AccountingSystem.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSystemRole")
                        .HasColumnType("bit");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("AccountingSystem.Models.RolePermission", b =>
                {
                    b.Property<int>("RolePermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RolePermissionId"));

                    b.Property<string>("GrantedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("GrantedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsGranted")
                        .HasColumnType("bit");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("RolePermissionId");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId", "PermissionId")
                        .IsUnique();

                    b.ToTable("RolePermissions");
                });

            modelBuilder.Entity("AccountingSystem.Models.SalesInvoice", b =>
                {
                    b.Property<int>("SalesInvoiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SalesInvoiceId"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<decimal>("DiscountAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InvoiceNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("IsPosted")
                        .HasColumnType("bit");

                    b.Property<decimal>("NetTotal")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal>("PaidAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("RemainingAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("RepresentativeId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("SubTotal")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TaxAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("WarehouseId")
                        .HasColumnType("int");

                    b.HasKey("SalesInvoiceId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("InvoiceNumber")
                        .IsUnique()
                        .HasDatabaseName("IX_SalesInvoice_Number");

                    b.HasIndex("RepresentativeId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("SalesInvoices", (string)null);

                    b.HasData(
                        new
                        {
                            SalesInvoiceId = 1,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2023, 12, 7, 0, 0, 0, 0, DateTimeKind.Local),
                            CustomerId = 1,
                            DiscountAmount = 25.00m,
                            InvoiceDate = new DateTime(2023, 12, 7, 0, 0, 0, 0, DateTimeKind.Local),
                            InvoiceNumber = "S-2024-001",
                            IsPosted = false,
                            NetTotal = 0m,
                            Notes = "",
                            PaidAmount = 0m,
                            RemainingAmount = 0m,
                            Status = 2,
                            SubTotal = 500.00m,
                            TaxAmount = 75.00m,
                            TotalAmount = 550.00m
                        },
                        new
                        {
                            SalesInvoiceId = 2,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2023, 12, 9, 0, 0, 0, 0, DateTimeKind.Local),
                            CustomerId = 2,
                            DiscountAmount = 0.00m,
                            InvoiceDate = new DateTime(2023, 12, 9, 0, 0, 0, 0, DateTimeKind.Local),
                            InvoiceNumber = "S-2024-002",
                            IsPosted = false,
                            NetTotal = 0m,
                            Notes = "",
                            PaidAmount = 0m,
                            RemainingAmount = 0m,
                            Status = 2,
                            SubTotal = 1200.00m,
                            TaxAmount = 180.00m,
                            TotalAmount = 1380.00m
                        },
                        new
                        {
                            SalesInvoiceId = 3,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2023, 12, 14, 0, 0, 0, 0, DateTimeKind.Local),
                            CustomerId = 3,
                            DiscountAmount = 50.00m,
                            InvoiceDate = new DateTime(2023, 12, 14, 0, 0, 0, 0, DateTimeKind.Local),
                            InvoiceNumber = "S-2024-003",
                            IsPosted = false,
                            NetTotal = 0m,
                            Notes = "",
                            PaidAmount = 0m,
                            RemainingAmount = 0m,
                            Status = 2,
                            SubTotal = 750.00m,
                            TaxAmount = 112.50m,
                            TotalAmount = 812.50m
                        },
                        new
                        {
                            SalesInvoiceId = 4,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2023, 12, 17, 0, 0, 0, 0, DateTimeKind.Local),
                            CustomerId = 4,
                            DiscountAmount = 100.00m,
                            InvoiceDate = new DateTime(2023, 12, 17, 0, 0, 0, 0, DateTimeKind.Local),
                            InvoiceNumber = "S-2024-004",
                            IsPosted = false,
                            NetTotal = 0m,
                            Notes = "",
                            PaidAmount = 0m,
                            RemainingAmount = 0m,
                            Status = 2,
                            SubTotal = 2200.00m,
                            TaxAmount = 330.00m,
                            TotalAmount = 2430.00m
                        },
                        new
                        {
                            SalesInvoiceId = 5,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2023, 12, 20, 0, 0, 0, 0, DateTimeKind.Local),
                            CustomerId = 5,
                            DiscountAmount = 30.00m,
                            InvoiceDate = new DateTime(2023, 12, 20, 0, 0, 0, 0, DateTimeKind.Local),
                            InvoiceNumber = "S-2024-005",
                            IsPosted = false,
                            NetTotal = 0m,
                            Notes = "",
                            PaidAmount = 0m,
                            RemainingAmount = 0m,
                            Status = 2,
                            SubTotal = 850.00m,
                            TaxAmount = 127.50m,
                            TotalAmount = 947.50m
                        },
                        new
                        {
                            SalesInvoiceId = 6,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2023, 12, 22, 0, 0, 0, 0, DateTimeKind.Local),
                            CustomerId = 6,
                            DiscountAmount = 200.00m,
                            InvoiceDate = new DateTime(2023, 12, 22, 0, 0, 0, 0, DateTimeKind.Local),
                            InvoiceNumber = "S-2024-006",
                            IsPosted = false,
                            NetTotal = 0m,
                            Notes = "",
                            PaidAmount = 0m,
                            RemainingAmount = 0m,
                            Status = 2,
                            SubTotal = 3500.00m,
                            TaxAmount = 525.00m,
                            TotalAmount = 3825.00m
                        },
                        new
                        {
                            SalesInvoiceId = 7,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2023, 12, 29, 0, 0, 0, 0, DateTimeKind.Local),
                            CustomerId = 1,
                            DiscountAmount = 0.00m,
                            InvoiceDate = new DateTime(2023, 12, 29, 0, 0, 0, 0, DateTimeKind.Local),
                            InvoiceNumber = "S-2024-007",
                            IsPosted = false,
                            NetTotal = 0m,
                            Notes = "",
                            PaidAmount = 0m,
                            RemainingAmount = 0m,
                            Status = 2,
                            SubTotal = 420.00m,
                            TaxAmount = 63.00m,
                            TotalAmount = 483.00m
                        },
                        new
                        {
                            SalesInvoiceId = 8,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2023, 12, 31, 0, 0, 0, 0, DateTimeKind.Local),
                            CustomerId = 2,
                            DiscountAmount = 500.00m,
                            InvoiceDate = new DateTime(2023, 12, 31, 0, 0, 0, 0, DateTimeKind.Local),
                            InvoiceNumber = "S-2024-008",
                            IsPosted = false,
                            NetTotal = 0m,
                            Notes = "",
                            PaidAmount = 0m,
                            RemainingAmount = 0m,
                            Status = 1,
                            SubTotal = 18500.00m,
                            TaxAmount = 2775.00m,
                            TotalAmount = 20775.00m
                        });
                });

            modelBuilder.Entity("AccountingSystem.Models.SalesInvoiceItem", b =>
                {
                    b.Property<int>("SalesInvoiceItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SalesInvoiceItemId"));

                    b.Property<decimal>("DiscountAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("DiscountPercentage")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal>("LineTotal")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("NetAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<decimal>("Quantity")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,3)");

                    b.Property<int>("SalesInvoiceId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("UnitId")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("SalesInvoiceItemId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SalesInvoiceId");

                    b.HasIndex("UnitId");

                    b.ToTable("SalesInvoiceItems", (string)null);

                    b.HasData(
                        new
                        {
                            SalesInvoiceItemId = 1,
                            DiscountAmount = 10.00m,
                            DiscountPercentage = 0m,
                            LineTotal = 165.00m,
                            NetAmount = 0m,
                            Notes = "",
                            ProductId = 1,
                            Quantity = 5.0m,
                            SalesInvoiceId = 1,
                            TotalPrice = 0m,
                            UnitPrice = 35.00m
                        },
                        new
                        {
                            SalesInvoiceItemId = 2,
                            DiscountAmount = 0.00m,
                            DiscountPercentage = 0m,
                            LineTotal = 84.00m,
                            NetAmount = 0m,
                            Notes = "",
                            ProductId = 3,
                            Quantity = 3.0m,
                            SalesInvoiceId = 1,
                            TotalPrice = 0m,
                            UnitPrice = 28.00m
                        },
                        new
                        {
                            SalesInvoiceItemId = 3,
                            DiscountAmount = 4.00m,
                            DiscountPercentage = 0m,
                            LineTotal = 100.00m,
                            NetAmount = 0m,
                            Notes = "",
                            ProductId = 4,
                            Quantity = 2.0m,
                            SalesInvoiceId = 1,
                            TotalPrice = 0m,
                            UnitPrice = 52.00m
                        },
                        new
                        {
                            SalesInvoiceItemId = 4,
                            DiscountAmount = 0.00m,
                            DiscountPercentage = 0m,
                            LineTotal = 150.00m,
                            NetAmount = 0m,
                            Notes = "",
                            ProductId = 7,
                            Quantity = 20.0m,
                            SalesInvoiceId = 1,
                            TotalPrice = 0m,
                            UnitPrice = 7.50m
                        },
                        new
                        {
                            SalesInvoiceItemId = 5,
                            DiscountAmount = 0.00m,
                            DiscountPercentage = 0m,
                            LineTotal = 464.00m,
                            NetAmount = 0m,
                            Notes = "",
                            ProductId = 2,
                            Quantity = 8.0m,
                            SalesInvoiceId = 2,
                            TotalPrice = 0m,
                            UnitPrice = 58.00m
                        },
                        new
                        {
                            SalesInvoiceItemId = 6,
                            DiscountAmount = 0.00m,
                            DiscountPercentage = 0m,
                            LineTotal = 120.00m,
                            NetAmount = 0m,
                            Notes = "",
                            ProductId = 5,
                            Quantity = 10.0m,
                            SalesInvoiceId = 2,
                            TotalPrice = 0m,
                            UnitPrice = 12.00m
                        },
                        new
                        {
                            SalesInvoiceItemId = 7,
                            DiscountAmount = 0.00m,
                            DiscountPercentage = 0m,
                            LineTotal = 360.00m,
                            NetAmount = 0m,
                            Notes = "",
                            ProductId = 9,
                            Quantity = 4.0m,
                            SalesInvoiceId = 2,
                            TotalPrice = 0m,
                            UnitPrice = 90.00m
                        },
                        new
                        {
                            SalesInvoiceItemId = 8,
                            DiscountAmount = 0.00m,
                            DiscountPercentage = 0m,
                            LineTotal = 225.00m,
                            NetAmount = 0m,
                            Notes = "",
                            ProductId = 8,
                            Quantity = 1.0m,
                            SalesInvoiceId = 2,
                            TotalPrice = 0m,
                            UnitPrice = 225.00m
                        },
                        new
                        {
                            SalesInvoiceItemId = 9,
                            DiscountAmount = 10.00m,
                            DiscountPercentage = 0m,
                            LineTotal = 200.00m,
                            NetAmount = 0m,
                            Notes = "",
                            ProductId = 10,
                            Quantity = 5.0m,
                            SalesInvoiceId = 3,
                            TotalPrice = 0m,
                            UnitPrice = 42.00m
                        },
                        new
                        {
                            SalesInvoiceItemId = 10,
                            DiscountAmount = 0.00m,
                            DiscountPercentage = 0m,
                            LineTotal = 304.00m,
                            NetAmount = 0m,
                            Notes = "",
                            ProductId = 11,
                            Quantity = 8.0m,
                            SalesInvoiceId = 3,
                            TotalPrice = 0m,
                            UnitPrice = 38.00m
                        },
                        new
                        {
                            SalesInvoiceItemId = 11,
                            DiscountAmount = 0.00m,
                            DiscountPercentage = 0m,
                            LineTotal = 240.00m,
                            NetAmount = 0m,
                            Notes = "",
                            ProductId = 14,
                            Quantity = 2.0m,
                            SalesInvoiceId = 3,
                            TotalPrice = 0m,
                            UnitPrice = 120.00m
                        },
                        new
                        {
                            SalesInvoiceItemId = 12,
                            DiscountAmount = 30.00m,
                            DiscountPercentage = 0m,
                            LineTotal = 660.00m,
                            NetAmount = 0m,
                            Notes = "",
                            ProductId = 12,
                            Quantity = 3.0m,
                            SalesInvoiceId = 4,
                            TotalPrice = 0m,
                            UnitPrice = 230.00m
                        },
                        new
                        {
                            SalesInvoiceItemId = 13,
                            DiscountAmount = 20.00m,
                            DiscountPercentage = 0m,
                            LineTotal = 1020.00m,
                            NetAmount = 0m,
                            Notes = "",
                            ProductId = 13,
                            Quantity = 2.0m,
                            SalesInvoiceId = 4,
                            TotalPrice = 0m,
                            UnitPrice = 520.00m
                        },
                        new
                        {
                            SalesInvoiceItemId = 14,
                            DiscountAmount = 50.00m,
                            DiscountPercentage = 0m,
                            LineTotal = 1050.00m,
                            NetAmount = 0m,
                            Notes = "",
                            ProductId = 20,
                            Quantity = 1.0m,
                            SalesInvoiceId = 4,
                            TotalPrice = 0m,
                            UnitPrice = 1100.00m
                        },
                        new
                        {
                            SalesInvoiceItemId = 15,
                            DiscountAmount = 8.00m,
                            DiscountPercentage = 0m,
                            LineTotal = 160.00m,
                            NetAmount = 0m,
                            Notes = "",
                            ProductId = 6,
                            Quantity = 4.0m,
                            SalesInvoiceId = 5,
                            TotalPrice = 0m,
                            UnitPrice = 42.00m
                        },
                        new
                        {
                            SalesInvoiceItemId = 16,
                            DiscountAmount = 0.00m,
                            DiscountPercentage = 0m,
                            LineTotal = 300.00m,
                            NetAmount = 0m,
                            Notes = "",
                            ProductId = 18,
                            Quantity = 5.0m,
                            SalesInvoiceId = 5,
                            TotalPrice = 0m,
                            UnitPrice = 60.00m
                        },
                        new
                        {
                            SalesInvoiceItemId = 17,
                            DiscountAmount = 10.00m,
                            DiscountPercentage = 0m,
                            LineTotal = 300.00m,
                            NetAmount = 0m,
                            Notes = "",
                            ProductId = 19,
                            Quantity = 2.0m,
                            SalesInvoiceId = 5,
                            TotalPrice = 0m,
                            UnitPrice = 155.00m
                        },
                        new
                        {
                            SalesInvoiceItemId = 18,
                            DiscountAmount = 5.00m,
                            DiscountPercentage = 0m,
                            LineTotal = 100.00m,
                            NetAmount = 0m,
                            Notes = "",
                            ProductId = 1,
                            Quantity = 3.0m,
                            SalesInvoiceId = 5,
                            TotalPrice = 0m,
                            UnitPrice = 35.00m
                        },
                        new
                        {
                            SalesInvoiceItemId = 19,
                            DiscountAmount = 200.00m,
                            DiscountPercentage = 0m,
                            LineTotal = 10000.00m,
                            NetAmount = 0m,
                            Notes = "",
                            ProductId = 15,
                            Quantity = 1.0m,
                            SalesInvoiceId = 6,
                            TotalPrice = 0m,
                            UnitPrice = 10200.00m
                        },
                        new
                        {
                            SalesInvoiceItemId = 20,
                            DiscountAmount = 0.00m,
                            DiscountPercentage = 0m,
                            LineTotal = 29000.00m,
                            NetAmount = 0m,
                            Notes = "",
                            ProductId = 16,
                            Quantity = 2.0m,
                            SalesInvoiceId = 6,
                            TotalPrice = 0m,
                            UnitPrice = 14500.00m
                        },
                        new
                        {
                            SalesInvoiceItemId = 21,
                            DiscountAmount = 0.00m,
                            DiscountPercentage = 0m,
                            LineTotal = 70.00m,
                            NetAmount = 0m,
                            Notes = "",
                            ProductId = 1,
                            Quantity = 2.0m,
                            SalesInvoiceId = 7,
                            TotalPrice = 0m,
                            UnitPrice = 35.00m
                        },
                        new
                        {
                            SalesInvoiceItemId = 22,
                            DiscountAmount = 0.00m,
                            DiscountPercentage = 0m,
                            LineTotal = 140.00m,
                            NetAmount = 0m,
                            Notes = "",
                            ProductId = 3,
                            Quantity = 5.0m,
                            SalesInvoiceId = 7,
                            TotalPrice = 0m,
                            UnitPrice = 28.00m
                        },
                        new
                        {
                            SalesInvoiceItemId = 23,
                            DiscountAmount = 0.00m,
                            DiscountPercentage = 0m,
                            LineTotal = 208.00m,
                            NetAmount = 0m,
                            Notes = "",
                            ProductId = 4,
                            Quantity = 4.0m,
                            SalesInvoiceId = 7,
                            TotalPrice = 0m,
                            UnitPrice = 52.00m
                        },
                        new
                        {
                            SalesInvoiceItemId = 24,
                            DiscountAmount = 500.00m,
                            DiscountPercentage = 0m,
                            LineTotal = 21500.00m,
                            NetAmount = 0m,
                            Notes = "",
                            ProductId = 17,
                            Quantity = 1.0m,
                            SalesInvoiceId = 8,
                            TotalPrice = 0m,
                            UnitPrice = 22000.00m
                        });
                });

            modelBuilder.Entity("AccountingSystem.Models.SalesReturn", b =>
                {
                    b.Property<int>("SalesReturnId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SalesReturnId"));

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<decimal>("NetTotal")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("OriginalSalesInvoiceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReturnDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("SubTotal")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TaxAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("SalesReturnId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OriginalSalesInvoiceId");

                    b.ToTable("SalesReturns");
                });

            modelBuilder.Entity("AccountingSystem.Models.SalesReturnDetail", b =>
                {
                    b.Property<int>("SalesReturnDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SalesReturnDetailId"));

                    b.Property<int?>("OriginalInvoiceDetailId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<decimal>("Quantity")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,3)");

                    b.Property<string>("ReturnReason")
                        .HasMaxLength(300)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("SalesReturnId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("UnitId")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("SalesReturnDetailId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SalesReturnId");

                    b.HasIndex("UnitId");

                    b.ToTable("SalesReturnDetails");
                });

            modelBuilder.Entity("AccountingSystem.Models.SecurityIncident", b =>
                {
                    b.Property<int>("IncidentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IncidentId"));

                    b.Property<string>("AdditionalData")
                        .HasMaxLength(1000)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("IPAddress")
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("IncidentTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("IncidentType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsResolved")
                        .HasColumnType("bit");

                    b.Property<string>("Resolution")
                        .HasMaxLength(500)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ResolvedBy")
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ResolvedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Severity")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("UserName")
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("IncidentId");

                    b.ToTable("SecurityIncidents");
                });

            modelBuilder.Entity("AccountingSystem.Models.SecuritySettings", b =>
                {
                    b.Property<int>("SettingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SettingId"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsSystemSetting")
                        .HasColumnType("bit");

                    b.Property<bool>("RequiresRestart")
                        .HasColumnType("bit");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("SettingKey")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SettingValue")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("SettingId");

                    b.ToTable("SecuritySettings");
                });

            modelBuilder.Entity("AccountingSystem.Models.StockMovement", b =>
                {
                    b.Property<int>("StockMovementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StockMovementId"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("MovementDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MovementType")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<decimal>("Quantity")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,3)");

                    b.Property<decimal>("QuantityInMainUnit")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,3)");

                    b.Property<int?>("ReferenceId")
                        .HasColumnType("int");

                    b.Property<string>("ReferenceNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ReferenceType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("UnitCost")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("UnitId")
                        .HasColumnType("int");

                    b.Property<int?>("WarehouseId")
                        .HasColumnType("int");

                    b.HasKey("StockMovementId");

                    b.HasIndex("ProductId");

                    b.HasIndex("UnitId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("StockMovements", (string)null);

                    b.HasData(
                        new
                        {
                            StockMovementId = 1,
                            CreatedBy = "",
                            MovementDate = new DateTime(2023, 12, 7, 0, 0, 0, 0, DateTimeKind.Local),
                            MovementType = 2,
                            Notes = "بيع فاتورة S-2024-001",
                            ProductId = 1,
                            Quantity = -5.0m,
                            QuantityInMainUnit = 0m,
                            ReferenceId = 1,
                            ReferenceNumber = "S-2024-001",
                            ReferenceType = "SalesInvoice",
                            UnitCost = 28.50m
                        },
                        new
                        {
                            StockMovementId = 2,
                            CreatedBy = "",
                            MovementDate = new DateTime(2023, 12, 9, 0, 0, 0, 0, DateTimeKind.Local),
                            MovementType = 2,
                            Notes = "بيع فاتورة S-2024-002",
                            ProductId = 2,
                            Quantity = -8.0m,
                            QuantityInMainUnit = 0m,
                            ReferenceId = 2,
                            ReferenceNumber = "S-2024-002",
                            ReferenceType = "SalesInvoice",
                            UnitCost = 48.00m
                        },
                        new
                        {
                            StockMovementId = 3,
                            CreatedBy = "",
                            MovementDate = new DateTime(2023, 12, 22, 0, 0, 0, 0, DateTimeKind.Local),
                            MovementType = 2,
                            Notes = "بيع تليفزيون سامسونج",
                            ProductId = 15,
                            Quantity = -1.0m,
                            QuantityInMainUnit = 0m,
                            ReferenceId = 6,
                            ReferenceNumber = "S-2024-006",
                            ReferenceType = "SalesInvoice",
                            UnitCost = 8500.00m
                        },
                        new
                        {
                            StockMovementId = 4,
                            CreatedBy = "",
                            MovementDate = new DateTime(2023, 12, 2, 0, 0, 0, 0, DateTimeKind.Local),
                            MovementType = 1,
                            Notes = "شراء قهوة محمصة من المورد",
                            ProductId = 18,
                            Quantity = 50.0m,
                            QuantityInMainUnit = 0m,
                            ReferenceNumber = "P-2024-001",
                            ReferenceType = "Purchase",
                            UnitCost = 45.00m
                        },
                        new
                        {
                            StockMovementId = 5,
                            CreatedBy = "",
                            MovementDate = new DateTime(2023, 12, 22, 0, 0, 0, 0, DateTimeKind.Local),
                            MovementType = 2,
                            Notes = "مبيعات متعددة خلال الشهر",
                            ProductId = 18,
                            Quantity = -45.0m,
                            QuantityInMainUnit = 0m,
                            ReferenceNumber = "Multiple Sales",
                            ReferenceType = "Sales",
                            UnitCost = 45.00m
                        },
                        new
                        {
                            StockMovementId = 6,
                            CreatedBy = "",
                            MovementDate = new DateTime(2023, 12, 27, 0, 0, 0, 0, DateTimeKind.Local),
                            MovementType = 3,
                            Notes = "تسوية: جبنة منتهية الصلاحية",
                            ProductId = 19,
                            Quantity = -2.0m,
                            QuantityInMainUnit = 0m,
                            ReferenceNumber = "ADJ-001",
                            ReferenceType = "Adjustment",
                            UnitCost = 120.00m
                        });
                });

            modelBuilder.Entity("AccountingSystem.Models.Supplier", b =>
                {
                    b.Property<int>("SupplierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SupplierId"));

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("Balance")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("SupplierCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("SupplierName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("SupplierId");

                    b.HasIndex("SupplierName")
                        .HasDatabaseName("IX_Supplier_Name");

                    b.ToTable("Suppliers", null, t =>
                        {
                            t.HasCheckConstraint("CK_Supplier_Name", "LEN([SupplierName]) > 0");
                        });

                    b.HasData(
                        new
                        {
                            SupplierId = 1,
                            Address = "القاهرة - العبور - المنطقة الصناعية الأولى",
                            Balance = 15000.00m,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Email = "info@ahram-foods.com",
                            IsActive = true,
                            Phone = "0223456789",
                            RowVersion = new byte[] { 0, 0, 0, 0, 0, 0, 0, 0 },
                            SupplierCode = "",
                            SupplierName = "شركة الأهرام للمواد الغذائية"
                        },
                        new
                        {
                            SupplierId = 2,
                            Address = "الإسكندرية - الورديان - المنطقة الحرة",
                            Balance = 8500.00m,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Email = "orders@nile-trading.com",
                            IsActive = true,
                            Phone = "0334567890",
                            RowVersion = new byte[] { 0, 0, 0, 0, 0, 0, 0, 0 },
                            SupplierCode = "",
                            SupplierName = "مؤسسة النيل للتجارة والاستيراد"
                        },
                        new
                        {
                            SupplierId = 3,
                            Address = "طنطا - المنطقة الصناعية - شارع المصنع",
                            Balance = 22000.00m,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Email = "sales@delta-appliances.com",
                            IsActive = true,
                            Phone = "0405678901",
                            RowVersion = new byte[] { 0, 0, 0, 0, 0, 0, 0, 0 },
                            SupplierCode = "",
                            SupplierName = "شركة الدلتا للأجهزة المنزلية"
                        },
                        new
                        {
                            SupplierId = 4,
                            Address = "القاهرة - مدينة العبور - المنطقة الصناعية الثالثة",
                            Balance = 45000.00m,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Email = "contact@mideast-electronics.com",
                            IsActive = true,
                            Phone = "0226789012",
                            RowVersion = new byte[] { 0, 0, 0, 0, 0, 0, 0, 0 },
                            SupplierCode = "",
                            SupplierName = "مجموعة الشرق الأوسط للإلكترونيات"
                        },
                        new
                        {
                            SupplierId = 5,
                            Address = "الإسكندرية - برج العرب الجديدة - القطعة الصناعية 15",
                            Balance = 6800.00m,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Email = "orders@egyptian-cleaning.com",
                            IsActive = true,
                            Phone = "0337890123",
                            RowVersion = new byte[] { 0, 0, 0, 0, 0, 0, 0, 0 },
                            SupplierCode = "",
                            SupplierName = "شركة المصرية لمواد التنظيف"
                        });
                });

            modelBuilder.Entity("AccountingSystem.Models.SupplierTransaction", b =>
                {
                    b.Property<int>("SupplierTransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SupplierTransactionId"));

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("ReferenceId")
                        .HasColumnType("int");

                    b.Property<string>("ReferenceType")
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TransactionNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("TransactionType")
                        .HasColumnType("int");

                    b.HasKey("SupplierTransactionId");

                    b.HasIndex("SupplierId");

                    b.HasIndex("TransactionNumber")
                        .IsUnique()
                        .HasDatabaseName("IX_SupplierTransaction_Number");

                    b.ToTable("SupplierTransactions", (string)null);
                });

            modelBuilder.Entity("AccountingSystem.Models.SystemSettings", b =>
                {
                    b.Property<int>("SettingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SettingId"));

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("SettingKey")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SettingValue")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("SettingId");

                    b.HasIndex("SettingKey")
                        .IsUnique()
                        .HasDatabaseName("IX_SystemSettings_Key");

                    b.ToTable("SystemSettings", (string)null);

                    b.HasData(
                        new
                        {
                            SettingId = 1,
                            Description = "اسم الشركة الرسمي",
                            SettingKey = "CompanyName",
                            SettingValue = "النظام المحاسبي الشامل",
                            UpdatedDate = new DateTime(2025, 10, 7, 22, 33, 7, 801, DateTimeKind.Local).AddTicks(8182)
                        },
                        new
                        {
                            SettingId = 2,
                            Description = "عنوان الشركة",
                            SettingKey = "CompanyAddress",
                            SettingValue = "جمهورية مصر العربية",
                            UpdatedDate = new DateTime(2025, 10, 7, 22, 33, 7, 803, DateTimeKind.Local).AddTicks(6625)
                        },
                        new
                        {
                            SettingId = 3,
                            Description = "هاتف الشركة",
                            SettingKey = "CompanyPhone",
                            SettingValue = "+20-000-000-0000",
                            UpdatedDate = new DateTime(2025, 10, 7, 22, 33, 7, 803, DateTimeKind.Local).AddTicks(6660)
                        },
                        new
                        {
                            SettingId = 4,
                            Description = "بريد الشركة الإلكتروني",
                            SettingKey = "CompanyEmail",
                            SettingValue = "info@company.com",
                            UpdatedDate = new DateTime(2025, 10, 7, 22, 33, 7, 803, DateTimeKind.Local).AddTicks(6662)
                        },
                        new
                        {
                            SettingId = 5,
                            Description = "نسبة ضريبة القيمة المضافة %",
                            SettingKey = "TaxRate",
                            SettingValue = "14",
                            UpdatedDate = new DateTime(2025, 10, 7, 22, 33, 7, 803, DateTimeKind.Local).AddTicks(6664)
                        },
                        new
                        {
                            SettingId = 6,
                            Description = "الرقم الضريبي للشركة",
                            SettingKey = "TaxNumber",
                            SettingValue = "123-456-789",
                            UpdatedDate = new DateTime(2025, 10, 7, 22, 33, 7, 803, DateTimeKind.Local).AddTicks(6665)
                        },
                        new
                        {
                            SettingId = 7,
                            Description = "العملة الأساسية - الجنيه المصري",
                            SettingKey = "Currency",
                            SettingValue = "ج.م",
                            UpdatedDate = new DateTime(2025, 10, 7, 22, 33, 7, 803, DateTimeKind.Local).AddTicks(6667)
                        },
                        new
                        {
                            SettingId = 8,
                            Description = "اسم العملة الكامل",
                            SettingKey = "CurrencyName",
                            SettingValue = "الجنيه المصري",
                            UpdatedDate = new DateTime(2025, 10, 7, 22, 33, 7, 803, DateTimeKind.Local).AddTicks(6668)
                        },
                        new
                        {
                            SettingId = 9,
                            Description = "رمز العملة المختصر",
                            SettingKey = "CurrencySymbol",
                            SettingValue = "ج.م",
                            UpdatedDate = new DateTime(2025, 10, 7, 22, 33, 7, 803, DateTimeKind.Local).AddTicks(6670)
                        },
                        new
                        {
                            SettingId = 10,
                            Description = "تنسيق عرض العملة",
                            SettingKey = "CurrencyFormat",
                            SettingValue = "#,##0.00 'ج.م'",
                            UpdatedDate = new DateTime(2025, 10, 7, 22, 33, 7, 803, DateTimeKind.Local).AddTicks(6671)
                        },
                        new
                        {
                            SettingId = 11,
                            Description = "عدد الخانات العشرية للعملة",
                            SettingKey = "DecimalPlaces",
                            SettingValue = "2",
                            UpdatedDate = new DateTime(2025, 10, 7, 22, 33, 7, 803, DateTimeKind.Local).AddTicks(6673)
                        },
                        new
                        {
                            SettingId = 12,
                            Description = "تنسيق التاريخ",
                            SettingKey = "DateFormat",
                            SettingValue = "dd/MM/yyyy",
                            UpdatedDate = new DateTime(2025, 10, 7, 22, 33, 7, 803, DateTimeKind.Local).AddTicks(6674)
                        },
                        new
                        {
                            SettingId = 13,
                            Description = "لغة النظام",
                            SettingKey = "Language",
                            SettingValue = "ar-EG",
                            UpdatedDate = new DateTime(2025, 10, 7, 22, 33, 7, 803, DateTimeKind.Local).AddTicks(6676)
                        },
                        new
                        {
                            SettingId = 14,
                            Description = "مسار النسخ الاحتياطية",
                            SettingKey = "BackupPath",
                            SettingValue = "C:\\Backups\\Accounting",
                            UpdatedDate = new DateTime(2025, 10, 7, 22, 33, 7, 803, DateTimeKind.Local).AddTicks(6677)
                        },
                        new
                        {
                            SettingId = 15,
                            Description = "تفعيل النسخ الاحتياطية التلقائية",
                            SettingKey = "AutoBackup",
                            SettingValue = "true",
                            UpdatedDate = new DateTime(2025, 10, 7, 22, 33, 7, 803, DateTimeKind.Local).AddTicks(6679)
                        });
                });

            modelBuilder.Entity("AccountingSystem.Models.Unit", b =>
                {
                    b.Property<int>("UnitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UnitId"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("UnitName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UnitSymbol")
                        .HasMaxLength(20)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("UnitId");

                    b.HasIndex("UnitName")
                        .IsUnique()
                        .HasDatabaseName("IX_Unit_Name");

                    b.ToTable("Units", (string)null);

                    b.HasData(
                        new
                        {
                            UnitId = 1,
                            IsActive = true,
                            RowVersion = new byte[] { 0, 0, 0, 0, 0, 0, 0, 0 },
                            UnitName = "قطعة",
                            UnitSymbol = "قطعة"
                        },
                        new
                        {
                            UnitId = 2,
                            IsActive = true,
                            RowVersion = new byte[] { 0, 0, 0, 0, 0, 0, 0, 0 },
                            UnitName = "كيلو جرام",
                            UnitSymbol = "كجم"
                        },
                        new
                        {
                            UnitId = 3,
                            IsActive = true,
                            RowVersion = new byte[] { 0, 0, 0, 0, 0, 0, 0, 0 },
                            UnitName = "لتر",
                            UnitSymbol = "لتر"
                        },
                        new
                        {
                            UnitId = 4,
                            IsActive = true,
                            RowVersion = new byte[] { 0, 0, 0, 0, 0, 0, 0, 0 },
                            UnitName = "متر",
                            UnitSymbol = "م"
                        },
                        new
                        {
                            UnitId = 5,
                            IsActive = true,
                            RowVersion = new byte[] { 0, 0, 0, 0, 0, 0, 0, 0 },
                            UnitName = "علبة",
                            UnitSymbol = "علبة"
                        },
                        new
                        {
                            UnitId = 6,
                            IsActive = true,
                            RowVersion = new byte[] { 0, 0, 0, 0, 0, 0, 0, 0 },
                            UnitName = "كرتونة",
                            UnitSymbol = "كرتونة"
                        },
                        new
                        {
                            UnitId = 7,
                            IsActive = true,
                            RowVersion = new byte[] { 0, 0, 0, 0, 0, 0, 0, 0 },
                            UnitName = "جرام",
                            UnitSymbol = "جم"
                        },
                        new
                        {
                            UnitId = 8,
                            IsActive = true,
                            RowVersion = new byte[] { 0, 0, 0, 0, 0, 0, 0, 0 },
                            UnitName = "طن",
                            UnitSymbol = "طن"
                        });
                });

            modelBuilder.Entity("AccountingSystem.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("FailedAccessCount")
                        .HasColumnType("int");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLoginDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastPasswordChange")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LockoutEnd")
                        .HasColumnType("datetime2");

                    b.Property<int>("MaxConcurrentSessions")
                        .HasColumnType("int");

                    b.Property<bool>("MustChangePassword")
                        .HasColumnType("bit");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Role")
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("TwoFactorSecret")
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("UserId");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("IX_User_Email")
                        .HasFilter("[Email] IS NOT NULL");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserName")
                        .IsUnique()
                        .HasDatabaseName("IX_User_UserName");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Email = "admin@system.com",
                            FailedAccessCount = 0,
                            FullName = "مدير النظام",
                            IsActive = true,
                            MaxConcurrentSessions = 1,
                            MustChangePassword = false,
                            PasswordHash = "PBKDF2:120000:c6c26yJQmQpsRPYGDmB5nQ==:V5IsjDNiy2POmseczguUobxGvG3j0EJkMTU1W0zH5PM=",
                            Phone = "01000000000",
                            Role = "admin",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            UserId = 2,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Email = "accountant@system.com",
                            FailedAccessCount = 0,
                            FullName = "المحاسب الرئيسي",
                            IsActive = true,
                            MaxConcurrentSessions = 1,
                            MustChangePassword = false,
                            PasswordHash = "PBKDF2:120000:c6c26yJQmQpsRPYGDmB5nQ==:V5IsjDNiy2POmseczguUobxGvG3j0EJkMTU1W0zH5PM=",
                            Phone = "01100000000",
                            Role = "accountant",
                            TwoFactorEnabled = false,
                            UserName = "accountant"
                        });
                });

            modelBuilder.Entity("AccountingSystem.Models.UserSession", b =>
                {
                    b.Property<int>("SessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SessionId"));

                    b.Property<bool>("ForceLogout")
                        .HasColumnType("bit");

                    b.Property<string>("IPAddress")
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastActivity")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LoginTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LogoutReason")
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("LogoutTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("MachineName")
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SessionToken")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("SessionId");

                    b.HasIndex("UserId");

                    b.ToTable("UserSessions");
                });

            modelBuilder.Entity("AccountingSystem.Models.Warehouse", b =>
                {
                    b.Property<int>("WarehouseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WarehouseId"));

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ManagerName")
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(20)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("WarehouseCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("WarehouseName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("WarehouseId");

                    b.ToTable("Warehouses");
                });

            modelBuilder.Entity("CustomerPromotion", b =>
                {
                    b.Property<int>("ApplicableCustomersCustomerId")
                        .HasColumnType("int");

                    b.Property<int>("PromotionsPromotionId")
                        .HasColumnType("int");

                    b.HasKey("ApplicableCustomersCustomerId", "PromotionsPromotionId");

                    b.HasIndex("PromotionsPromotionId");

                    b.ToTable("CustomerPromotion");
                });

            modelBuilder.Entity("DiscountRuleProduct", b =>
                {
                    b.Property<int>("ApplicableProductsProductId")
                        .HasColumnType("int");

                    b.Property<int>("DiscountRulesDiscountId")
                        .HasColumnType("int");

                    b.HasKey("ApplicableProductsProductId", "DiscountRulesDiscountId");

                    b.HasIndex("DiscountRulesDiscountId");

                    b.ToTable("DiscountRuleProduct");
                });

            modelBuilder.Entity("ProductPromotion", b =>
                {
                    b.Property<int>("ApplicableProductsProductId")
                        .HasColumnType("int");

                    b.Property<int>("PromotionsPromotionId")
                        .HasColumnType("int");

                    b.HasKey("ApplicableProductsProductId", "PromotionsPromotionId");

                    b.HasIndex("PromotionsPromotionId");

                    b.ToTable("ProductPromotion");
                });

            modelBuilder.Entity("AccountingSystem.Models.Account", b =>
                {
                    b.HasOne("AccountingSystem.Models.Account", "ParentAccount")
                        .WithMany("ChildAccounts")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ParentAccount");
                });

            modelBuilder.Entity("AccountingSystem.Models.AuditLog", b =>
                {
                    b.HasOne("AccountingSystem.Models.User", "User")
                        .WithMany("AuditLogs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AccountingSystem.Models.CashDrawerOperation", b =>
                {
                    b.HasOne("AccountingSystem.Models.Cashier", "Cashier")
                        .WithMany()
                        .HasForeignKey("CashierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AccountingSystem.Models.CashierSession", "Session")
                        .WithMany("CashDrawerOperations")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Cashier");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("AccountingSystem.Models.CashTransaction", b =>
                {
                    b.HasOne("AccountingSystem.Models.CashBox", "CashBox")
                        .WithMany("CashTransactions")
                        .HasForeignKey("CashBoxId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CashBox");
                });

            modelBuilder.Entity("AccountingSystem.Models.CashierSession", b =>
                {
                    b.HasOne("AccountingSystem.Models.Cashier", "Cashier")
                        .WithMany("Sessions")
                        .HasForeignKey("CashierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cashier");
                });

            modelBuilder.Entity("AccountingSystem.Models.Customer", b =>
                {
                    b.HasOne("AccountingSystem.Models.PriceLevel", "PriceLevel")
                        .WithMany("Customers")
                        .HasForeignKey("PriceLevelId");

                    b.Navigation("PriceLevel");
                });

            modelBuilder.Entity("AccountingSystem.Models.CustomerLoyaltyPoint", b =>
                {
                    b.HasOne("AccountingSystem.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AccountingSystem.Models.LoyaltyProgram", "LoyaltyProgram")
                        .WithMany("CustomerPoints")
                        .HasForeignKey("LoyaltyProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("LoyaltyProgram");
                });

            modelBuilder.Entity("AccountingSystem.Models.CustomerTransaction", b =>
                {
                    b.HasOne("AccountingSystem.Models.Customer", "Customer")
                        .WithMany("CustomerTransactions")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("AccountingSystem.Models.DataSecurity", b =>
                {
                    b.HasOne("AccountingSystem.Models.User", "User")
                        .WithMany("DataSecurities")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AccountingSystem.Models.Discount", b =>
                {
                    b.HasOne("AccountingSystem.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");

                    b.HasOne("AccountingSystem.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.Navigation("Category");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("AccountingSystem.Models.ErrorLog", b =>
                {
                    b.HasOne("AccountingSystem.Models.User", "ResolverUser")
                        .WithMany()
                        .HasForeignKey("ResolvedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("AccountingSystem.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("ResolverUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AccountingSystem.Models.ErrorLogComment", b =>
                {
                    b.HasOne("AccountingSystem.Models.ErrorLog", "ErrorLog")
                        .WithMany("ErrorComments")
                        .HasForeignKey("ErrorLogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AccountingSystem.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ErrorLog");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AccountingSystem.Models.JournalVoucherDetail", b =>
                {
                    b.HasOne("AccountingSystem.Models.Account", "Account")
                        .WithMany("JournalVoucherDetails")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AccountingSystem.Models.JournalVoucher", "JournalVoucher")
                        .WithMany("Details")
                        .HasForeignKey("JournalVoucherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("JournalVoucher");
                });

            modelBuilder.Entity("AccountingSystem.Models.LoyaltyTransaction", b =>
                {
                    b.HasOne("AccountingSystem.Models.CustomerLoyaltyPoint", "CustomerLoyaltyPoint")
                        .WithMany("Transactions")
                        .HasForeignKey("CustomerLoyaltyPointId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AccountingSystem.Models.POSTransaction", "POSTransaction")
                        .WithMany()
                        .HasForeignKey("POSTransactionId");

                    b.Navigation("CustomerLoyaltyPoint");

                    b.Navigation("POSTransaction");
                });

            modelBuilder.Entity("AccountingSystem.Models.Notification", b =>
                {
                    b.HasOne("AccountingSystem.Models.User", "TargetUser")
                        .WithMany()
                        .HasForeignKey("TargetUserId");

                    b.Navigation("TargetUser");
                });

            modelBuilder.Entity("AccountingSystem.Models.NotificationAction", b =>
                {
                    b.HasOne("AccountingSystem.Models.Notification", "Notification")
                        .WithMany("Actions")
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Notification");
                });

            modelBuilder.Entity("AccountingSystem.Models.NotificationLog", b =>
                {
                    b.HasOne("AccountingSystem.Models.Notification", "Notification")
                        .WithMany()
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AccountingSystem.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Notification");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AccountingSystem.Models.NotificationSettings", b =>
                {
                    b.HasOne("AccountingSystem.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AccountingSystem.Models.POSPayment", b =>
                {
                    b.HasOne("AccountingSystem.Models.POSTransaction", "Transaction")
                        .WithMany("Payments")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("AccountingSystem.Models.POSTransaction", b =>
                {
                    b.HasOne("AccountingSystem.Models.Cashier", "Cashier")
                        .WithMany("Transactions")
                        .HasForeignKey("CashierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AccountingSystem.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");

                    b.HasOne("AccountingSystem.Models.CashierSession", "Session")
                        .WithMany("Transactions")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Cashier");

                    b.Navigation("Customer");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("AccountingSystem.Models.POSTransactionItem", b =>
                {
                    b.HasOne("AccountingSystem.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AccountingSystem.Models.POSTransaction", "Transaction")
                        .WithMany("Items")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("AccountingSystem.Models.Product", b =>
                {
                    b.HasOne("AccountingSystem.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AccountingSystem.Models.Unit", "MainUnit")
                        .WithMany("Products")
                        .HasForeignKey("MainUnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("MainUnit");
                });

            modelBuilder.Entity("AccountingSystem.Models.ProductPriceHistory", b =>
                {
                    b.HasOne("AccountingSystem.Models.Product", "Product")
                        .WithMany("PriceHistories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("AccountingSystem.Models.ProductStock", b =>
                {
                    b.HasOne("AccountingSystem.Models.Product", "Product")
                        .WithMany("ProductStocks")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AccountingSystem.Models.Warehouse", "Warehouse")
                        .WithMany("ProductStocks")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("AccountingSystem.Models.ProductUnit", b =>
                {
                    b.HasOne("AccountingSystem.Models.Product", "Product")
                        .WithMany("ProductUnits")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AccountingSystem.Models.Unit", "Unit")
                        .WithMany("ProductUnits")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("AccountingSystem.Models.PurchaseInvoice", b =>
                {
                    b.HasOne("AccountingSystem.Models.Supplier", "Supplier")
                        .WithMany("PurchaseInvoices")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("AccountingSystem.Models.PurchaseInvoiceItem", b =>
                {
                    b.HasOne("AccountingSystem.Models.Product", "Product")
                        .WithMany("PurchaseInvoiceItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AccountingSystem.Models.PurchaseInvoice", "PurchaseInvoice")
                        .WithMany("Items")
                        .HasForeignKey("PurchaseInvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AccountingSystem.Models.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId");

                    b.Navigation("Product");

                    b.Navigation("PurchaseInvoice");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("AccountingSystem.Models.PurchaseReturn", b =>
                {
                    b.HasOne("AccountingSystem.Models.PurchaseInvoice", "OriginalPurchaseInvoice")
                        .WithMany()
                        .HasForeignKey("OriginalPurchaseInvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AccountingSystem.Models.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OriginalPurchaseInvoice");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("AccountingSystem.Models.PurchaseReturnDetail", b =>
                {
                    b.HasOne("AccountingSystem.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AccountingSystem.Models.PurchaseReturn", "PurchaseReturn")
                        .WithMany("PurchaseReturnDetails")
                        .HasForeignKey("PurchaseReturnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AccountingSystem.Models.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId");

                    b.Navigation("Product");

                    b.Navigation("PurchaseReturn");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("AccountingSystem.Models.RolePermission", b =>
                {
                    b.HasOne("AccountingSystem.Models.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AccountingSystem.Models.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("AccountingSystem.Models.SalesInvoice", b =>
                {
                    b.HasOne("AccountingSystem.Models.Customer", "Customer")
                        .WithMany("SalesInvoices")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AccountingSystem.Models.Representative", "Representative")
                        .WithMany("SalesInvoices")
                        .HasForeignKey("RepresentativeId");

                    b.HasOne("AccountingSystem.Models.Warehouse", "Warehouse")
                        .WithMany("SalesInvoices")
                        .HasForeignKey("WarehouseId");

                    b.Navigation("Customer");

                    b.Navigation("Representative");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("AccountingSystem.Models.SalesInvoiceItem", b =>
                {
                    b.HasOne("AccountingSystem.Models.Product", "Product")
                        .WithMany("SalesInvoiceItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AccountingSystem.Models.SalesInvoice", "SalesInvoice")
                        .WithMany("Items")
                        .HasForeignKey("SalesInvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AccountingSystem.Models.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId");

                    b.Navigation("Product");

                    b.Navigation("SalesInvoice");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("AccountingSystem.Models.SalesReturn", b =>
                {
                    b.HasOne("AccountingSystem.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AccountingSystem.Models.SalesInvoice", "OriginalSalesInvoice")
                        .WithMany()
                        .HasForeignKey("OriginalSalesInvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("OriginalSalesInvoice");
                });

            modelBuilder.Entity("AccountingSystem.Models.SalesReturnDetail", b =>
                {
                    b.HasOne("AccountingSystem.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AccountingSystem.Models.SalesReturn", "SalesReturn")
                        .WithMany("SalesReturnDetails")
                        .HasForeignKey("SalesReturnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AccountingSystem.Models.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId");

                    b.Navigation("Product");

                    b.Navigation("SalesReturn");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("AccountingSystem.Models.StockMovement", b =>
                {
                    b.HasOne("AccountingSystem.Models.Product", "Product")
                        .WithMany("StockMovements")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AccountingSystem.Models.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId");

                    b.HasOne("AccountingSystem.Models.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseId");

                    b.Navigation("Product");

                    b.Navigation("Unit");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("AccountingSystem.Models.SupplierTransaction", b =>
                {
                    b.HasOne("AccountingSystem.Models.Supplier", "Supplier")
                        .WithMany("SupplierTransactions")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("AccountingSystem.Models.User", b =>
                {
                    b.HasOne("AccountingSystem.Models.Role", "UserRole")
                        .WithMany("Users")
                        .HasForeignKey("RoleId");

                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("AccountingSystem.Models.UserSession", b =>
                {
                    b.HasOne("AccountingSystem.Models.User", "User")
                        .WithMany("UserSessions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CustomerPromotion", b =>
                {
                    b.HasOne("AccountingSystem.Models.Customer", null)
                        .WithMany()
                        .HasForeignKey("ApplicableCustomersCustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AccountingSystem.Models.Promotion", null)
                        .WithMany()
                        .HasForeignKey("PromotionsPromotionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DiscountRuleProduct", b =>
                {
                    b.HasOne("AccountingSystem.Models.Product", null)
                        .WithMany()
                        .HasForeignKey("ApplicableProductsProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AccountingSystem.Models.DiscountRule", null)
                        .WithMany()
                        .HasForeignKey("DiscountRulesDiscountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProductPromotion", b =>
                {
                    b.HasOne("AccountingSystem.Models.Product", null)
                        .WithMany()
                        .HasForeignKey("ApplicableProductsProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AccountingSystem.Models.Promotion", null)
                        .WithMany()
                        .HasForeignKey("PromotionsPromotionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AccountingSystem.Models.Account", b =>
                {
                    b.Navigation("ChildAccounts");

                    b.Navigation("JournalVoucherDetails");
                });

            modelBuilder.Entity("AccountingSystem.Models.CashBox", b =>
                {
                    b.Navigation("CashTransactions");
                });

            modelBuilder.Entity("AccountingSystem.Models.Cashier", b =>
                {
                    b.Navigation("Sessions");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("AccountingSystem.Models.CashierSession", b =>
                {
                    b.Navigation("CashDrawerOperations");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("AccountingSystem.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("AccountingSystem.Models.Customer", b =>
                {
                    b.Navigation("CustomerTransactions");

                    b.Navigation("SalesInvoices");
                });

            modelBuilder.Entity("AccountingSystem.Models.CustomerLoyaltyPoint", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("AccountingSystem.Models.ErrorLog", b =>
                {
                    b.Navigation("ErrorComments");
                });

            modelBuilder.Entity("AccountingSystem.Models.JournalVoucher", b =>
                {
                    b.Navigation("Details");
                });

            modelBuilder.Entity("AccountingSystem.Models.LoyaltyProgram", b =>
                {
                    b.Navigation("CustomerPoints");
                });

            modelBuilder.Entity("AccountingSystem.Models.Notification", b =>
                {
                    b.Navigation("Actions");
                });

            modelBuilder.Entity("AccountingSystem.Models.POSTransaction", b =>
                {
                    b.Navigation("Items");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("AccountingSystem.Models.Permission", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("AccountingSystem.Models.PriceLevel", b =>
                {
                    b.Navigation("Customers");
                });

            modelBuilder.Entity("AccountingSystem.Models.Product", b =>
                {
                    b.Navigation("PriceHistories");

                    b.Navigation("ProductStocks");

                    b.Navigation("ProductUnits");

                    b.Navigation("PurchaseInvoiceItems");

                    b.Navigation("SalesInvoiceItems");

                    b.Navigation("StockMovements");
                });

            modelBuilder.Entity("AccountingSystem.Models.PurchaseInvoice", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("AccountingSystem.Models.PurchaseReturn", b =>
                {
                    b.Navigation("PurchaseReturnDetails");
                });

            modelBuilder.Entity("AccountingSystem.Models.Representative", b =>
                {
                    b.Navigation("SalesInvoices");
                });

            modelBuilder.Entity("AccountingSystem.Models.Role", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("AccountingSystem.Models.SalesInvoice", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("AccountingSystem.Models.SalesReturn", b =>
                {
                    b.Navigation("SalesReturnDetails");
                });

            modelBuilder.Entity("AccountingSystem.Models.Supplier", b =>
                {
                    b.Navigation("PurchaseInvoices");

                    b.Navigation("SupplierTransactions");
                });

            modelBuilder.Entity("AccountingSystem.Models.Unit", b =>
                {
                    b.Navigation("ProductUnits");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("AccountingSystem.Models.User", b =>
                {
                    b.Navigation("AuditLogs");

                    b.Navigation("DataSecurities");

                    b.Navigation("UserSessions");
                });

            modelBuilder.Entity("AccountingSystem.Models.Warehouse", b =>
                {
                    b.Navigation("ProductStocks");

                    b.Navigation("SalesInvoices");
                });
#pragma warning restore 612, 618
        }
    }
}
