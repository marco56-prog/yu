using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.EntityFrameworkCore;

namespace AccountingSystem.Models;

// أنواع الإشعارات
public enum NotificationType
{
    LowStock = 1,           // نفاد المخزون
    OverduePayment = 2,     // دفعات متأخرة  
    ProductExpiry = 3,      // انتهاء صلاحية
    SystemAlert = 4,        // تنبيهات النظام
    SalesTarget = 5,        // أهداف المبيعات
    CustomerDebt = 6,       // ديون العملاء
    SupplierPayment = 7,    // مستحقات الموردين
    BackupReminder = 8,     // تذكير النسخ الاحتياطي
    UserActivity = 9,       // نشاط المستخدمين
    SystemMaintenance = 10  // صيانة النظام
}

// مستوى أهمية الإشعار
public enum NotificationPriority
{
    Low = 1,
    Medium = 2,
    High = 3,
    Critical = 4,
    Urgent = 5
}

// حالة الإشعار
public enum NotificationStatus
{
    Unread = 1,
    Read = 2,
    Acknowledged = 3,
    Dismissed = 4,
    Archived = 5
}

// نموذج الإشعارات
public class Notification
{
    [Key]
    public int NotificationId { get; set; }

    [Required, StringLength(200)]
    public required string Title { get; set; }

    [Required, StringLength(1000)]
    public required string Message { get; set; }

    [Required]
    public NotificationType Type { get; set; }

    [Required]
    public NotificationPriority Priority { get; set; } = NotificationPriority.Medium;

    [Required]
    public NotificationStatus Status { get; set; } = NotificationStatus.Unread;

    // معلومات المرجع (اختيارية)
    [StringLength(50)]
    public string? ReferenceType { get; set; } // "Product", "Customer", "Invoice", etc.

    public int? ReferenceId { get; set; }

    [StringLength(500)]
    public string? ActionUrl { get; set; } // رابط للانتقال للعنصر المرتبط

    // معلومات المستخدم
    public int? TargetUserId { get; set; } // null = إشعار للجميع

    [StringLength(50)]
    public string CreatedBy { get; set; } = "System";

    public DateTime CreatedDate { get; set; } = DateTime.Now;

    public DateTime? ReadDate { get; set; }
    public DateTime? AcknowledgedDate { get; set; }

    // إعدادات الإشعار
    public bool IsAutoGenerated { get; set; } = true;
    public bool RequiresAction { get; set; } = false;
    public DateTime? ExpiryDate { get; set; }

    [StringLength(100)]
    public string? Icon { get; set; } // اسم الأيقونة

    [StringLength(50)]
    public string? Color { get; set; } // لون الإشعار

    [Timestamp]
    public byte[] RowVersion { get; set; } = default!;

    // العلاقات
    [ForeignKey(nameof(TargetUserId))]
    public virtual User? TargetUser { get; set; }

    public virtual ICollection<NotificationAction> Actions { get; set; } = new List<NotificationAction>();
}

// أوامر الإشعارات (مثل "تم القراءة"، "إرجاء"، "حل المشكلة")
public class NotificationAction
{
    [Key]
    public int ActionId { get; set; }

    [Required]
    public int NotificationId { get; set; }

    [Required, StringLength(50)]
    public required string ActionType { get; set; } // "Read", "Snooze", "Resolve", "Dismiss"

    [StringLength(200)]
    public string? ActionDescription { get; set; }

    public DateTime ActionDate { get; set; } = DateTime.Now;

    [StringLength(50)]
    public string ActionBy { get; set; } = string.Empty;

    [StringLength(500)]
    public string? Notes { get; set; }

    // العلاقات
    [ForeignKey(nameof(NotificationId))]
    public virtual Notification Notification { get; set; } = null!;
}

// إعدادات الإشعارات للمستخدمين
public class NotificationSettings
{
    [Key]
    public int SettingId { get; set; }

    [Required]
    public int UserId { get; set; }

    [Required]
    public NotificationType NotificationType { get; set; }

    public bool IsEnabled { get; set; } = true;

    public bool ShowPopup { get; set; } = true;
    public bool PlaySound { get; set; } = false;
    public bool SendEmail { get; set; } = false;

    // فلترة حسب الأولوية
    public NotificationPriority MinimumPriority { get; set; } = NotificationPriority.Low;

    // إعدادات التكرار
    public bool EnableAutoSnooze { get; set; } = false;
    public int AutoSnoozeDuration { get; set; } = 60; // بالدقائق

    public DateTime CreatedDate { get; set; } = DateTime.Now;
    public DateTime? UpdatedDate { get; set; }

    [Timestamp]
    public byte[] RowVersion { get; set; } = default!;

    // العلاقات
    [ForeignKey(nameof(UserId))]
    public virtual User User { get; set; } = null!;
}

// قواعد الإشعارات التلقائية
public class NotificationRule
{
    [Key]
    public int RuleId { get; set; }

    [Required, StringLength(100)]
    public required string RuleName { get; set; }

    [StringLength(300)]
    public string? Description { get; set; }

    [Required]
    public NotificationType NotificationType { get; set; }

    [Required]
    public NotificationPriority Priority { get; set; }

    // شروط التفعيل
    [Required, StringLength(50)]
    public required string TriggerCondition { get; set; } // "LowStock", "OverdueInvoice", etc.

    [StringLength(1000)]
    public string? ConditionParameters { get; set; } // JSON للمعايير

    // قالب الإشعار
    [Required, StringLength(200)]
    public required string MessageTemplate { get; set; }

    [StringLength(200)]
    public string? TitleTemplate { get; set; }

    // إعدادات التكرار
    public bool IsRepeating { get; set; } = false;
    public int RepeatIntervalMinutes { get; set; } = 60;
    public int MaxRepetitions { get; set; } = 5;

    public bool IsActive { get; set; } = true;

    public DateTime CreatedDate { get; set; } = DateTime.Now;
    public DateTime? LastTriggered { get; set; }

    [StringLength(50)]
    public string CreatedBy { get; set; } = string.Empty;

    [Timestamp]
    public byte[] RowVersion { get; set; } = default!;
}

// سجل الإشعارات المرسلة (للإحصائيات)
public class NotificationLog
{
    [Key]
    public int LogId { get; set; }

    [Required]
    public int NotificationId { get; set; }

    [Required]
    public int? UserId { get; set; }

    [StringLength(50)]
    public string DeliveryMethod { get; set; } = "Popup"; // "Popup", "Email", "SMS"

    public bool IsDelivered { get; set; } = true;

    public DateTime SentDate { get; set; } = DateTime.Now;
    public DateTime? DeliveredDate { get; set; }

    [StringLength(500)]
    public string? ErrorMessage { get; set; }

    [StringLength(100)]
    public string? DeviceInfo { get; set; }

    [StringLength(50)]
    public string? IPAddress { get; set; }

    // العلاقات
    [ForeignKey(nameof(NotificationId))]
    public virtual Notification Notification { get; set; } = null!;

    [ForeignKey(nameof(UserId))]
    public virtual User? User { get; set; }
}